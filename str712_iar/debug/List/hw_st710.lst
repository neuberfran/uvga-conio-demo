###############################################################################
#                                                                             #
#                                                       01/Apr/2009  17:06:11 #
# IAR ANSI C/C++ Compiler V5.30.0.31174/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  c:\projekty\microvga\uVGALib\str712_iar\hw_st710.c       #
#    Command line =  c:\projekty\microvga\uVGALib\str712_iar\hw_st710.c -lCN  #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\List\ -o   #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\       #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4 Kickstart\arm\INC\DLib_Config_Normal.h"    #
#                    -I c:\projekty\microvga\uVGALib\str712_iar\include\ -I   #
#                    c:\projekty\microvga\uVGALib\str712_iar\library\inc\ -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Kickstart\arm\INC\" --cpu_mode arm -Ol                   #
#    List file    =  c:\projekty\microvga\uVGALib\str712_iar\debug\List\hw_st #
#                    710.lst                                                  #
#    Object file  =  c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\hw_st7 #
#                    10.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

c:\projekty\microvga\uVGALib\str712_iar\hw_st710.c
      1          /*
      2              hw_st710.c
      3              STMicroelectronics STR71x hardware low-level routines
      4              Part of MicroVGA CONIO library / demo project
      5              Copyright (c) 2008-9 SECONS s.r.o., http://www.MicroVGA.com
      6          
      7              This program is free software: you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation, either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              This program is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          
     20              MCU:   STR712
     21              Crystal:  4 MHz (PLL1 (4Mhz * 24 / 1 ) = 48Mhz (CPU max))
     22              Operating frequency:  48 MHz (MCLK = PCLK1 = PCLK2 = 48MHz)
     23              UART Speed:     1 Mbit
     24              Connection:
     25                MicroVGA.TXD = STR712.U0.RX (P0_8)
     26                MicroVGA.RXD = STR712.U0.TX (P0_9)
     27                MicroVGA.RTS = STR712.P0_5
     28                MicroVGA.CTS = STR712.P0_4
     29          
     30              _putch, _getch, _kbhit must be defined for lib (conio.c and ui.c)
     31          */
     32          
     33          #include "library/inc/71x_lib.h"
     34          
     35          /* Private define ------------------------------------------------------------*/
     36          #define UART0_Rx_Pin (0x0001 << 8)  /*TQFP 64: pin N° 63, TQFP 144 pin N° 143*/
     37          #define UART0_Tx_Pin (0x0001 << 9)  /*TQFP 64: pin N° 64, TQFP 144 pin N° 144*/
     38          
     39          #define UART1_Rx_Pin (0x0001 << 10) /* TQFP 64: pin N° 1, TQFP 144 pin N° 1*/
     40          #define UART1_Tx_Pin (0x0001 << 11) /* TQFP 64: pin N° 2, TQFP 144 pin N° 3*/
     41          
     42          #define UART2_Rx_Pin (0x0001 << 13) /* TQFP 64: pin N° 5, TQFP 144 pin N° 9*/
     43          #define UART2_Tx_Pin (0x0001 << 14) /* TQFP 64: pin N° 6, TQFP 144 pin N° 10*/
     44          
     45          #define UART3_Rx_Pin (0x0001 << 1)  /* TQFP 64: pin N° 52, TQFP 144 pin N° 123*/
     46          #define UART3_Tx_Pin (0x0001 << 0)  /* TQFP 64: pin N° 53, TQFP 144 pin N° 124*/
     47          
     48          #define CTS_PIN_NUMBER 4
     49          #define CTS_PIN (0x0001 << RTS_PIN_NUMBER)
     50          #define CTS_STOP 1 // CTS pin is driven high whenever the device is not ready to receive
     51          #define CTS_GO 0 //The CTS pin  is asserted (driven low) whenever the receiver is ready to receive data
     52          #define RTS_PIN_NUMBER 5
     53          #define RTS_PIN (0x0001 << CTS_PIN_NUMBER)
     54          
     55          #define LED_PIN_NUMBER 8
     56          #define LED_PIN (0x0001 << 8)
     57          
     58          #define Use_UART0
     59          /* #define Use_UART1 */
     60          /* #define Use_UART2 */
     61          /* #define Use_UART3 */
     62          
     63          #ifdef Use_UART0
     64            #define  UARTX  UART0
     65            #define  UARTX_Rx_Pin  UART0_Rx_Pin
     66            #define  UARTX_Tx_Pin  UART0_Tx_Pin
     67            #define  UARTX_Periph  UART0_Periph
     68          #endif /* Use_UART0 */
     69          
     70          #ifdef Use_UART1
     71            #define  UARTX  UART1
     72            #define  UARTX_Rx_Pin  UART1_Rx_Pin
     73            #define  UARTX_Tx_Pin  UART1_Tx_Pin
     74            #define  UARTX_Periph  UART1_Periph
     75          #endif /* Use_UART1 */
     76          
     77          #ifdef Use_UART2
     78            #define  UARTX  UART2
     79            #define  UARTX_Rx_Pin  UART2_Rx_Pin
     80            #define  UARTX_Tx_Pin  UART2_Tx_Pin
     81            #define  UARTX_Periph  UART2_Periph
     82          #endif /* Use_UART2 */
     83          
     84          #ifdef Use_UART3
     85            #define  UARTX  UART3
     86            #define  UARTX_Rx_Pin  UART3_Rx_Pin
     87            #define  UARTX_Tx_Pin  UART3_Tx_Pin
     88            #define  UARTX_Periph  UART3_Periph
     89          #endif /* Use_UART3 */
     90          

   \                                 In section .bss, align 1
     91          u8 led_state;
   \                     led_state:
   \   00000000                      DS8 1
     92          

   \                                 In section .text, align 4, keep-with-next
     93          void blink_led()
     94          { //debug routine (blink diod on LED_PIN_NUMBER)
   \                     blink_led:
   \   00000000   00502DE9           PUSH     {R12,LR}
     95            led_state=!led_state;
   \   00000004   ........           LDR      R0,??DataTable4  ;; led_state
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100001A           BNE      ??blink_led_0
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   000000EA           B        ??blink_led_1
   \                     ??blink_led_0:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     ??blink_led_1:
   \   00000020   ........           LDR      R1,??DataTable4  ;; led_state
   \   00000024   0000C1E5           STRB     R0,[R1, #+0]
     96            GPIO_BitWrite(GPIO1,LED_PIN_NUMBER,led_state);
   \   00000028   ........           LDR      R0,??DataTable4  ;; led_state
   \   0000002C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   E004A0E3           MOV      R0,#-536870912
   \   00000038   400C80E3           ORR      R0,R0,#0x4000
   \   0000003C   ........           BL       GPIO_BitWrite
     97          }
   \   00000040   0180BDE8           POP      {R0,PC}          ;; return
     98          

   \                                 In section .text, align 4, keep-with-next
     99          void _putch (char ch)
    100          {
   \                     _putch:
   \   00000000   01402DE9           PUSH     {R0,LR}
   \   00000004   000000EA           B        ??_putch_0
    101            //Wait for RTS (uVGA ready to recv data) 
    102            //low -> uVGA is ready to recv data
    103            while (GPIO_BitRead(GPIO1,RTS_PIN_NUMBER))
    104            {
    105              blink_led();
   \                     ??_putch_1:
   \   00000008   ........           BL       blink_led
    106            }
   \                     ??_putch_0:
   \   0000000C   0510A0E3           MOV      R1,#+5
   \   00000010   E004A0E3           MOV      R0,#-536870912
   \   00000014   400C80E3           ORR      R0,R0,#0x4000
   \   00000018   ........           BL       GPIO_BitRead
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F8FFFF1A           BNE      ??_putch_1
    107          
    108            UART_ByteSend(UARTX, (u8 *)&ch);
   \   00000024   0D10B0E1           MOVS     R1,SP
   \   00000028   C004A0E3           MOV      R0,#-1073741824
   \   0000002C   400C80E3           ORR      R0,R0,#0x4000
   \   00000030   ........           BL       UART_ByteSend
    109                  
    110            while(!((UART_FlagStatus(UARTX)) & UART_TxEmpty))
   \                     ??_putch_2:
   \   00000034   C004A0E3           MOV      R0,#-1073741824
   \   00000038   400C80E3           ORR      R0,R0,#0x4000
   \   0000003C   ........           BL       UART_FlagStatus
   \   00000040   020010E3           TST      R0,#0x2
   \   00000044   FAFFFF0A           BEQ      ??_putch_2
    111            {
    112                /* wait until the data transmission is finished */
    113            } 
    114          }
   \   00000048   0180BDE8           POP      {R0,PC}          ;; return
    115          

   \                                 In section .text, align 4, keep-with-next
    116          int _getch (void)
    117          {
   \                     _getch:
   \   00000000   00502DE9           PUSH     {R12,LR}
    118            int ch;
    119           
    120            //wait until data is received
    121            //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_GO);
    122            while(!(UART_FlagStatus(UARTX) & UART_RxBufNotEmpty));
   \                     ??_getch_0:
   \   00000004   C004A0E3           MOV      R0,#-1073741824
   \   00000008   400C80E3           ORR      R0,R0,#0x4000
   \   0000000C   ........           BL       UART_FlagStatus
   \   00000010   010010E3           TST      R0,#0x1
   \   00000014   FAFFFF0A           BEQ      ??_getch_0
    123            //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_STOP);
    124            
    125            UART_ByteReceive(UARTX, (u8 *)&ch,0xFF);
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   0D10B0E1           MOVS     R1,SP
   \   00000020   C004A0E3           MOV      R0,#-1073741824
   \   00000024   400C80E3           ORR      R0,R0,#0x4000
   \   00000028   ........           BL       UART_ByteReceive
    126            
    127            if (ch == 0)
   \   0000002C   00009DE5           LDR      R0,[SP, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0D00001A           BNE      ??_getch_1
    128            { //special key pressed, read second byte
    129          
    130                //wait until data is received
    131                //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_GO);
    132                while(!(UART_FlagStatus(UARTX) & UART_RxBufNotEmpty));
   \                     ??_getch_2:
   \   00000038   C004A0E3           MOV      R0,#-1073741824
   \   0000003C   400C80E3           ORR      R0,R0,#0x4000
   \   00000040   ........           BL       UART_FlagStatus
   \   00000044   010010E3           TST      R0,#0x1
   \   00000048   FAFFFF0A           BEQ      ??_getch_2
    133                //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_STOP);
    134           
    135               UART_ByteReceive(UARTX, (u8 *)&ch,0xFF);
   \   0000004C   FF20A0E3           MOV      R2,#+255
   \   00000050   0D10B0E1           MOVS     R1,SP
   \   00000054   C004A0E3           MOV      R0,#-1073741824
   \   00000058   400C80E3           ORR      R0,R0,#0x4000
   \   0000005C   ........           BL       UART_ByteReceive
    136                ch = 0x100 | ch;
   \   00000060   00009DE5           LDR      R0,[SP, #+0]
   \   00000064   400F90E3           ORRS     R0,R0,#0x100
   \   00000068   00008DE5           STR      R0,[SP, #+0]
   \   0000006C   000000EA           B        ??_getch_3
    137            }
    138            else
    139              blink_led();
   \                     ??_getch_1:
   \   00000070   ........           BL       blink_led
    140            
    141            return ch;
   \                     ??_getch_3:
   \   00000074   00009DE5           LDR      R0,[SP, #+0]
   \   00000078   0280BDE8           POP      {R1,PC}          ;; return
    142          }
    143          

   \                                 In section .text, align 4, keep-with-next
    144          int _kbhit (void)
    145          {
   \                     _kbhit:
   \   00000000   00502DE9           PUSH     {R12,LR}
    146            // If overrun and NO characters in queue, reset flag.
    147             u8 res;
    148            
    149            //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_GO);
    150            
    151            res=(UART_FlagStatus(UARTX) & UART_RxBufNotEmpty);
   \   00000004   C004A0E3           MOV      R0,#-1073741824
   \   00000008   400C80E3           ORR      R0,R0,#0x4000
   \   0000000C   ........           BL       UART_FlagStatus
   \   00000010   010010E2           ANDS     R0,R0,#0x1
    152            
    153            //if (res) //keyboard was hit, stop recv another data
    154              //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_STOP);
    155            
    156            return res;
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   0280BDE8           POP      {R1,PC}          ;; return
    157          }
    158          

   \                                 In section .text, align 4, keep-with-next
    159          void MCU_Init(void)
    160          {
   \                     MCU_Init:
   \   00000000   00502DE9           PUSH     {R12,LR}
    161          #ifdef DEBUG
    162            debug();
    163            #endif
    164           
    165            /* System clocks configuration ---------------------------------------------*/
    166            /* MCLK = PCLK1 = PCLK2 = 48MHz*/ 
    167            
    168            /* Configure FCLK = RCLK / 1 */
    169            RCCU_PCLK1Config (RCCU_DEFAULT);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   ........           BL       RCCU_PCLK1Config
    170          
    171            /* Configure PCLK = RCLK / 1 */
    172            RCCU_PCLK2Config (RCCU_DEFAULT);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       RCCU_PCLK2Config
    173          
    174            /* Configure MCLK clock for the CPU, RCCU_DEFAULT = RCLK /1 */
    175            RCCU_MCLKConfig (RCCU_DEFAULT);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       RCCU_MCLKConfig
    176             
    177            // 4 Mhz on board OSC
    178            /* Configure the PLL1 (4Mhz * 24 / 1 ) = 48Mhz (CPU max) */
    179            RCCU_PLL1Config (RCCU_PLL1_Mul_24, RCCU_Div_1) ;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   ........           BL       RCCU_PLL1Config
    180          
    181            while(RCCU_FlagStatus(RCCU_PLL1_LOCK) == RESET)
   \                     ??MCU_Init_0:
   \   00000028   0200A0E3           MOV      R0,#+2
   \   0000002C   ........           BL       RCCU_FlagStatus
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FBFFFF0A           BEQ      ??MCU_Init_0
    182            {
    183              /* Wait PLL to lock */
    184            }
    185            /* Select PLL1_Output as RCLK clock */
    186            RCCU_RCLKSourceConfig (RCCU_PLL1_Output) ;  
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   ........           BL       RCCU_RCLKSourceConfig
    187            
    188            /* Enable UART0 clock on APB1 */
    189            APB_ClockConfig (APB1, ENABLE, UART0_Periph | UART1_Periph
    190                              | UART2_Periph | UART3_Periph);
   \   00000040   7820A0E3           MOV      R2,#+120
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   4301A0E3           MOV      R0,#-1073741808
   \   0000004C   ........           BL       APB_ClockConfig
    191           
    192            /* Enable GPIO0 clock on APB2 */
    193            APB_ClockConfig (APB2, ENABLE, GPIO0_Periph );
   \   00000050   0420A0E3           MOV      R2,#+4
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   1000A0E3           MOV      R0,#+16
   \   0000005C   E00480E3           ORR      R0,R0,#0xE0000000
   \   00000060   ........           BL       APB_ClockConfig
    194            
    195            /* GPIO configuration ------------------------------------------------------*/
    196          
    197            /*  Configure the GPIO pins */
    198            GPIO_Config(GPIO0, UARTX_Tx_Pin, GPIO_AF_PP);
   \   00000064   0720A0E3           MOV      R2,#+7
   \   00000068   801FA0E3           MOV      R1,#+512
   \   0000006C   E004A0E3           MOV      R0,#-536870912
   \   00000070   C00D80E3           ORR      R0,R0,#0x3000
   \   00000074   ........           BL       GPIO_Config
    199            GPIO_Config(GPIO0, UARTX_Rx_Pin, GPIO_IN_TRI_CMOS);
   \   00000078   0220A0E3           MOV      R2,#+2
   \   0000007C   401FA0E3           MOV      R1,#+256
   \   00000080   E004A0E3           MOV      R0,#-536870912
   \   00000084   C00D80E3           ORR      R0,R0,#0x3000
   \   00000088   ........           BL       GPIO_Config
    200            
    201            /* Configure CTS*/
    202            GPIO_Config(GPIO1,CTS_PIN,GPIO_OUT_PP); //CTS handshake OUT
   \   0000008C   0520A0E3           MOV      R2,#+5
   \   00000090   2010A0E3           MOV      R1,#+32
   \   00000094   E004A0E3           MOV      R0,#-536870912
   \   00000098   400C80E3           ORR      R0,R0,#0x4000
   \   0000009C   ........           BL       GPIO_Config
    203            //GPIO_BitWrite(GPIO1,RTS_PIN_NUMBER,RTS_STOP);
    204            
    205            GPIO_BitWrite(GPIO1,CTS_PIN_NUMBER,CTS_GO);
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0410A0E3           MOV      R1,#+4
   \   000000A8   E004A0E3           MOV      R0,#-536870912
   \   000000AC   400C80E3           ORR      R0,R0,#0x4000
   \   000000B0   ........           BL       GPIO_BitWrite
    206            
    207            /*Configure RTS*/
    208            GPIO_Config(GPIO1,RTS_PIN,GPIO_IN_TRI_CMOS); //RTS handshake IN
   \   000000B4   0220A0E3           MOV      R2,#+2
   \   000000B8   1010A0E3           MOV      R1,#+16
   \   000000BC   E004A0E3           MOV      R0,#-536870912
   \   000000C0   400C80E3           ORR      R0,R0,#0x4000
   \   000000C4   ........           BL       GPIO_Config
    209            
    210            /*Configure LED*/
    211            led_state=0;
   \   000000C8   ........           LDR      R0,??DataTable4  ;; led_state
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   0010C0E5           STRB     R1,[R0, #+0]
    212            GPIO_Config(GPIO1,LED_PIN,GPIO_OUT_PP); //LED for debug
   \   000000D4   0520A0E3           MOV      R2,#+5
   \   000000D8   401FA0E3           MOV      R1,#+256
   \   000000DC   E004A0E3           MOV      R0,#-536870912
   \   000000E0   400C80E3           ORR      R0,R0,#0x4000
   \   000000E4   ........           BL       GPIO_Config
    213            GPIO_BitWrite(GPIO1,LED_PIN_NUMBER,led_state);
   \   000000E8   ........           LDR      R0,??DataTable4  ;; led_state
   \   000000EC   0020D0E5           LDRB     R2,[R0, #+0]
   \   000000F0   0810A0E3           MOV      R1,#+8
   \   000000F4   E004A0E3           MOV      R0,#-536870912
   \   000000F8   400C80E3           ORR      R0,R0,#0x4000
   \   000000FC   ........           BL       GPIO_BitWrite
    214           
    215            /* UART configuration ------------------------------------------------------*/
    216            UART_Init(UARTX);
   \   00000100   C004A0E3           MOV      R0,#-1073741824
   \   00000104   400C80E3           ORR      R0,R0,#0x4000
   \   00000108   ........           BL       UART_Init
    217            
    218            /*  Turn UARTX on */
    219            UART_OnOffConfig(UARTX, ENABLE); 
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   C004A0E3           MOV      R0,#-1073741824
   \   00000114   400C80E3           ORR      R0,R0,#0x4000
   \   00000118   ........           BL       UART_OnOffConfig
    220            
    221            /*  Disable FIFOs */      
    222            UART_FifoConfig (UARTX, ENABLE); 
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   C004A0E3           MOV      R0,#-1073741824
   \   00000124   400C80E3           ORR      R0,R0,#0x4000
   \   00000128   ........           BL       UART_FifoConfig
    223            
    224            /*  Reset the UART_RxFIFO */     
    225            UART_FifoReset  (UARTX , UART_RxFIFO); 
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   C004A0E3           MOV      R0,#-1073741824
   \   00000134   400C80E3           ORR      R0,R0,#0x4000
   \   00000138   ........           BL       UART_FifoReset
    226            
    227            /*  Reset the UART_TxFIFO */
    228            UART_FifoReset  (UARTX , UART_TxFIFO); 
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   C004A0E3           MOV      R0,#-1073741824
   \   00000144   400C80E3           ORR      R0,R0,#0x4000
   \   00000148   ........           BL       UART_FifoReset
    229            
    230            /*  Disable Loop Back */
    231            UART_LoopBackConfig(UARTX , DISABLE);                                           
   \   0000014C   0010A0E3           MOV      R1,#+0
   \   00000150   C004A0E3           MOV      R0,#-1073741824
   \   00000154   400C80E3           ORR      R0,R0,#0x4000
   \   00000158   ........           BL       UART_LoopBackConfig
    232           
    233            /* Configure UART*/
    234            UART_Config(UARTX, 1000000, UART_NO_PARITY, UART_1_StopBits, UARTM_8D);
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   08002DE5           STR      R0,[SP, #-8]!
   \   00000164   0830A0E3           MOV      R3,#+8
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   F41AA0E3           MOV      R1,#+999424
   \   00000170   901F81E3           ORR      R1,R1,#0x240
   \   00000174   C004A0E3           MOV      R0,#-1073741824
   \   00000178   400C80E3           ORR      R0,R0,#0x4000
   \   0000017C   ........           BL       UART_Config
   \   00000180   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
    235            
    236            /*  Enable Rx */
    237            UART_RxConfig(UARTX ,ENABLE); 
   \   00000184   0110A0E3           MOV      R1,#+1
   \   00000188   C004A0E3           MOV      R0,#-1073741824
   \   0000018C   400C80E3           ORR      R0,R0,#0x4000
   \   00000190   ........           BL       UART_RxConfig
    238          }
   \   00000194   0180BDE8           POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     led_state

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     MCU_Init      16
     _getch         8
     _kbhit         8
     _putch         8
     blink_led      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     led_state         1
     blink_led        68
     _putch           76
     _getch          124
     _kbhit           28
     MCU_Init        408
     ??DataTable4      4

 
   1 byte  in section .bss
 708 bytes in section .text
 
 708 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none

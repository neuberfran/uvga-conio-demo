###############################################################################
#                                                                             #
#                                                       01/Apr/2009  17:06:11 #
# IAR ANSI C/C++ Compiler V5.30.0.31174/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  c:\projekty\microvga\uVGALib\lib\ui.c                    #
#    Command line =  c:\projekty\microvga\uVGALib\lib\ui.c -lCN               #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\List\ -o   #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\       #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4 Kickstart\arm\INC\DLib_Config_Normal.h"    #
#                    -I c:\projekty\microvga\uVGALib\str712_iar\include\ -I   #
#                    c:\projekty\microvga\uVGALib\str712_iar\library\inc\ -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Kickstart\arm\INC\" --cpu_mode arm -Ol                   #
#    List file    =  c:\projekty\microvga\uVGALib\str712_iar\debug\List\ui.ls #
#                    t                                                        #
#    Object file  =  c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\ui.o   #
#                                                                             #
#                                                                             #
###############################################################################

c:\projekty\microvga\uVGALib\lib\ui.c
      1          /*
      2              ui.c
      3              User interface functions.
      4              Part of MicroVGA CONIO library / demo project
      5              Copyright (c) 2008-9 SECONS s.r.o., http://www.MicroVGA.com
      6          
      7              This program is free software: you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation, either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              This program is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          */
     20          
     21          #include "../h/conio.h"
     22          #include "../h/ui.h"
     23          #include "../h/kbd.h"
     24          
     25          

   \                                 In section .text, align 4, keep-with-next
     26          int runmenu(char x, char y, const char *menu[], int defaultitem)
     27          {
   \                     runmenu:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   02B0B0E1           MOVS     R11,R2
     28            int key, i,j, itemno;
     29            int nitems, width;
     30            char *s;
     31          
     32            itemno = defaultitem-1;
   \   0000000C   017053E2           SUBS     R7,R3,#+1
     33            width = 20;
   \   00000010   1450A0E3           MOV      R5,#+20
     34          
     35            width = 10;
   \   00000014   0A00A0E3           MOV      R0,#+10
   \   00000018   0050B0E1           MOVS     R5,R0
     36            nitems = 0;
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   0A0000EA           B        ??runmenu_0
     37            while (menu[nitems] != 0) {
     38              for (j=0;menu[nitems][j];j++);
   \                     ??runmenu_1:
   \   00000024   019099E2           ADDS     R9,R9,#+1
   \                     ??runmenu_2:
   \   00000028   0400A0E3           MOV      R0,#+4
   \   0000002C   90B621E0           MLA      R1,R0,R6,R11
   \   00000030   000091E5           LDR      R0,[R1, #+0]
   \   00000034   0000D9E7           LDRB     R0,[R9, +R0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F8FFFF1A           BNE      ??runmenu_1
     39              if (j>width)
   \   00000040   090055E1           CMP      R5,R9
   \   00000044   000000AA           BGE      ??runmenu_3
   \   00000048   0950B0E1           MOVS     R5,R9
     40               width = j;
     41              nitems++;
   \                     ??runmenu_3:
   \   0000004C   016096E2           ADDS     R6,R6,#+1
   \                     ??runmenu_0:
   \   00000050   0400A0E3           MOV      R0,#+4
   \   00000054   90B621E0           MLA      R1,R0,R6,R11
   \   00000058   000091E5           LDR      R0,[R1, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0100000A           BEQ      ??runmenu_4
   \   00000064   0090A0E3           MOV      R9,#+0
   \   00000068   EEFFFFEA           B        ??runmenu_2
     42            }
     43            width+=2;
   \                     ??runmenu_4:
   \   0000006C   025095E2           ADDS     R5,R5,#+2
     44          
     45            if (itemno < 0 || itemno > nitems)
   \   00000070   000057E3           CMP      R7,#+0
   \   00000074   0100004A           BMI      ??runmenu_5
   \   00000078   070056E1           CMP      R6,R7
   \   0000007C   000000AA           BGE      ??runmenu_6
     46              itemno = 0;
   \                     ??runmenu_5:
   \   00000080   0070A0E3           MOV      R7,#+0
   \                     ??runmenu_6:
   \   00000084   610000EA           B        ??runmenu_7
     47          
     48            while (1) {
     49          
     50          
     51            cursoroff();
     52            textattr(CYAN<<4 | BLACK);
     53            gotoxy(x,y);
     54            _putch(ACS_ULCORNER);
     55            for (i=0;i<width+2;i++) 
     56          	_putch(ACS_HLINE);
   \                     ??runmenu_8:
   \   00000088   C400A0E3           MOV      R0,#+196
   \   0000008C   ........           BL       _putch
   \   00000090   018098E2           ADDS     R8,R8,#+1
   \                     ??runmenu_9:
   \   00000094   020095E2           ADDS     R0,R5,#+2
   \   00000098   000058E1           CMP      R8,R0
   \   0000009C   F9FFFFBA           BLT      ??runmenu_8
     57            _putch(ACS_URCORNER);
   \   000000A0   BF00A0E3           MOV      R0,#+191
   \   000000A4   ........           BL       _putch
     58          
     59            for (i = 0;i<nitems;i++) {
   \   000000A8   0080A0E3           MOV      R8,#+0
   \   000000AC   060000EA           B        ??runmenu_10
     60          	  gotoxy(x,y+i+1);
     61          	  _putch(ACS_VLINE);
     62          	  _putch(' ');
     63                if (i == itemno)
     64                  textattr(YELLOW);
     65                s = 0;
     66          	  for (j=0;j<width;j++) {
     67                  if (s && *s)
     68                    _putch(*s++);
     69          	    else _putch(' ');
     70                  if (s == 0)
     71                    s = (char *)menu[i];
     72                }
     73                 textattr(CYAN<<4 | BLACK);
   \                     ??runmenu_11:
   \   000000B0   6000A0E3           MOV      R0,#+96
   \   000000B4   ........           BL       textattr
     74          	  _putch(' ');
   \   000000B8   2000A0E3           MOV      R0,#+32
   \   000000BC   ........           BL       _putch
     75          	  _putch(ACS_VLINE);
   \   000000C0   B300A0E3           MOV      R0,#+179
   \   000000C4   ........           BL       _putch
   \   000000C8   018098E2           ADDS     R8,R8,#+1
   \                     ??runmenu_10:
   \   000000CC   060058E1           CMP      R8,R6
   \   000000D0   250000AA           BGE      ??runmenu_12
   \   000000D4   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000D8   0810B0E1           MOVS     R1,R8
   \   000000DC   000091E0           ADDS     R0,R1,R0
   \   000000E0   011090E2           ADDS     R1,R0,#+1
   \   000000E4   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   000000E8   0400B0E1           MOVS     R0,R4
   \   000000EC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000F0   ........           BL       gotoxy
   \   000000F4   B300A0E3           MOV      R0,#+179
   \   000000F8   ........           BL       _putch
   \   000000FC   2000A0E3           MOV      R0,#+32
   \   00000100   ........           BL       _putch
   \   00000104   070058E1           CMP      R8,R7
   \   00000108   0100001A           BNE      ??runmenu_13
   \   0000010C   0B00A0E3           MOV      R0,#+11
   \   00000110   ........           BL       textattr
   \                     ??runmenu_13:
   \   00000114   00A0A0E3           MOV      R10,#+0
   \   00000118   0090A0E3           MOV      R9,#+0
   \   0000011C   070000EA           B        ??runmenu_14
   \                     ??runmenu_15:
   \   00000120   2000A0E3           MOV      R0,#+32
   \   00000124   ........           BL       _putch
   \                     ??runmenu_16:
   \   00000128   00005AE3           CMP      R10,#+0
   \   0000012C   0200001A           BNE      ??runmenu_17
   \   00000130   0400A0E3           MOV      R0,#+4
   \   00000134   90B821E0           MLA      R1,R0,R8,R11
   \   00000138   00A091E5           LDR      R10,[R1, #+0]
   \                     ??runmenu_17:
   \   0000013C   019099E2           ADDS     R9,R9,#+1
   \                     ??runmenu_14:
   \   00000140   050059E1           CMP      R9,R5
   \   00000144   D9FFFFAA           BGE      ??runmenu_11
   \   00000148   00005AE3           CMP      R10,#+0
   \   0000014C   F3FFFF0A           BEQ      ??runmenu_15
   \   00000150   0000DAE5           LDRB     R0,[R10, #+0]
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   F0FFFF0A           BEQ      ??runmenu_15
   \   0000015C   0000DAE5           LDRB     R0,[R10, #+0]
   \   00000160   ........           BL       _putch
   \   00000164   01A09AE2           ADDS     R10,R10,#+1
   \   00000168   EEFFFFEA           B        ??runmenu_16
     76            }
     77          
     78            gotoxy(x,y+nitems+1);
   \                     ??runmenu_12:
   \   0000016C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000170   0610B0E1           MOVS     R1,R6
   \   00000174   000091E0           ADDS     R0,R1,R0
   \   00000178   011090E2           ADDS     R1,R0,#+1
   \   0000017C   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000180   0400B0E1           MOVS     R0,R4
   \   00000184   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000188   ........           BL       gotoxy
     79            _putch(ACS_LLCORNER);
   \   0000018C   C000A0E3           MOV      R0,#+192
   \   00000190   ........           BL       _putch
     80            for (i=0;i<width+2;i++) 
   \   00000194   0080A0E3           MOV      R8,#+0
   \   00000198   020000EA           B        ??runmenu_18
     81          	_putch(ACS_HLINE);
   \                     ??runmenu_19:
   \   0000019C   C400A0E3           MOV      R0,#+196
   \   000001A0   ........           BL       _putch
   \   000001A4   018098E2           ADDS     R8,R8,#+1
   \                     ??runmenu_18:
   \   000001A8   020095E2           ADDS     R0,R5,#+2
   \   000001AC   000058E1           CMP      R8,R0
   \   000001B0   F9FFFFBA           BLT      ??runmenu_19
     82            _putch(ACS_LRCORNER);
   \   000001B4   D900A0E3           MOV      R0,#+217
   \   000001B8   ........           BL       _putch
     83          
     84            
     85            while (!_kbhit()) ;
   \                     ??runmenu_20:
   \   000001BC   ........           BL       _kbhit
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   FCFFFF0A           BEQ      ??runmenu_20
     86            
     87             if (_kbhit()) {
   \   000001C8   ........           BL       _kbhit
   \   000001CC   000050E3           CMP      R0,#+0
   \   000001D0   0E00000A           BEQ      ??runmenu_21
     88               key = _getch();
   \   000001D4   ........           BL       _getch
     89               switch(key) {
   \   000001D8   0A0050E3           CMP      R0,#+10
   \   000001DC   1F00000A           BEQ      ??runmenu_22
   \   000001E0   1B0050E3           CMP      R0,#+27
   \   000001E4   1A00000A           BEQ      ??runmenu_23
   \   000001E8   520F50E3           CMP      R0,#+328
   \   000001EC   0200000A           BEQ      ??runmenu_24
   \   000001F0   540F50E3           CMP      R0,#+336
   \   000001F4   1000000A           BEQ      ??runmenu_25
   \   000001F8   040000EA           B        ??runmenu_26
     90                case KB_UP: if (itemno>0) itemno--;  else itemno = nitems-1; break;
   \                     ??runmenu_24:
   \   000001FC   010057E3           CMP      R7,#+1
   \   00000200   010000BA           BLT      ??runmenu_27
   \   00000204   017057E2           SUBS     R7,R7,#+1
   \   00000208   000000EA           B        ??runmenu_28
   \                     ??runmenu_27:
   \   0000020C   017056E2           SUBS     R7,R6,#+1
   \                     ??runmenu_28:
   \                     ??runmenu_29:
   \                     ??runmenu_26:
   \                     ??runmenu_21:
   \                     ??runmenu_7:
   \   00000210   ........           BL       cursoroff
   \   00000214   6000A0E3           MOV      R0,#+96
   \   00000218   ........           BL       textattr
   \   0000021C   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000220   0400B0E1           MOVS     R0,R4
   \   00000224   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000228   ........           BL       gotoxy
   \   0000022C   DA00A0E3           MOV      R0,#+218
   \   00000230   ........           BL       _putch
   \   00000234   0080A0E3           MOV      R8,#+0
   \   00000238   95FFFFEA           B        ??runmenu_9
     91                case KB_DOWN: itemno++; itemno %= nitems; break;
   \                     ??runmenu_25:
   \   0000023C   017097E2           ADDS     R7,R7,#+1
   \   00000240   0700B0E1           MOVS     R0,R7
   \   00000244   0610B0E1           MOVS     R1,R6
   \   00000248   ........           BL       __aeabi_idivmod
   \   0000024C   0170B0E1           MOVS     R7,R1
   \   00000250   EEFFFFEA           B        ??runmenu_29
     92                case KB_ESC: cursoron(); return 0;
   \                     ??runmenu_23:
   \   00000254   ........           BL       cursoron
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   010000EA           B        ??runmenu_30
     93                case KB_ENTER: cursoron(); return itemno+1;
   \                     ??runmenu_22:
   \   00000260   ........           BL       cursoron
   \   00000264   010097E2           ADDS     R0,R7,#+1
   \                     ??runmenu_30:
   \   00000268   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
     94               } 
     95             } 
     96            }
     97          }
     98          
     99          
    100          

   \                                 In section .text, align 4, keep-with-next
    101          void drawfkeys(const char *fkeys[])
    102          {
   \                     drawfkeys:
   \   00000000   F8402DE9           PUSH     {R3-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    103           const char *s;
    104           int i, j;
    105          
    106           gotoxy(1,25);
   \   00000008   1910A0E3           MOV      R1,#+25
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   ........           BL       gotoxy
    107           for (i=0;i<10;i++) {
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   000000EA           B        ??drawfkeys_0
   \                     ??drawfkeys_1:
   \   0000001C   015095E2           ADDS     R5,R5,#+1
   \                     ??drawfkeys_0:
   \   00000020   0A0055E3           CMP      R5,#+10
   \   00000024   320000AA           BGE      ??drawfkeys_2
    108             textcolor(WHITE);
   \   00000028   0F00A0E3           MOV      R0,#+15
   \   0000002C   ........           BL       textcolor
    109             textbackground(BLACK);
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   ........           BL       textbackground
    110             if (i!= 0)
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   0100000A           BEQ      ??drawfkeys_3
    111              _putch(' ');
   \   00000040   2000A0E3           MOV      R0,#+32
   \   00000044   ........           BL       _putch
    112             if (i== 9) {
   \                     ??drawfkeys_3:
   \   00000048   090055E3           CMP      R5,#+9
   \   0000004C   0400001A           BNE      ??drawfkeys_4
    113              _putch('1');
   \   00000050   3100A0E3           MOV      R0,#+49
   \   00000054   ........           BL       _putch
    114              _putch('0');
   \   00000058   3000A0E3           MOV      R0,#+48
   \   0000005C   ........           BL       _putch
   \   00000060   050000EA           B        ??drawfkeys_5
    115             } else
    116             _putch((i%10)+'1');
   \                     ??drawfkeys_4:
   \   00000064   0500B0E1           MOVS     R0,R5
   \   00000068   0A10A0E3           MOV      R1,#+10
   \   0000006C   ........           BL       __aeabi_idivmod
   \   00000070   310091E2           ADDS     R0,R1,#+49
   \   00000074   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000078   ........           BL       _putch
    117             textcolor(BLACK);
   \                     ??drawfkeys_5:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   ........           BL       textcolor
    118             textbackground(CYAN);
   \   00000084   0600A0E3           MOV      R0,#+6
   \   00000088   ........           BL       textbackground
    119          
    120            s = fkeys[i] ? fkeys[i] : 0;
   \   0000008C   0400A0E3           MOV      R0,#+4
   \   00000090   904521E0           MLA      R1,R0,R5,R4
   \   00000094   000091E5           LDR      R0,[R1, #+0]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0300000A           BEQ      ??drawfkeys_6
   \   000000A0   0400A0E3           MOV      R0,#+4
   \   000000A4   904521E0           MLA      R1,R0,R5,R4
   \   000000A8   006091E5           LDR      R6,[R1, #+0]
   \   000000AC   000000EA           B        ??drawfkeys_7
   \                     ??drawfkeys_6:
   \   000000B0   0060A0E3           MOV      R6,#+0
    121            for (j=0;j<6;j++) {
   \                     ??drawfkeys_7:
   \   000000B4   0070A0E3           MOV      R7,#+0
   \   000000B8   020000EA           B        ??drawfkeys_8
    122             if (s && *s)
    123              _putch(*s++);
    124             else _putch(' ');
   \                     ??drawfkeys_9:
   \   000000BC   2000A0E3           MOV      R0,#+32
   \   000000C0   ........           BL       _putch
   \                     ??drawfkeys_10:
   \   000000C4   017097E2           ADDS     R7,R7,#+1
   \                     ??drawfkeys_8:
   \   000000C8   060057E3           CMP      R7,#+6
   \   000000CC   D2FFFFAA           BGE      ??drawfkeys_1
   \   000000D0   000056E3           CMP      R6,#+0
   \   000000D4   F8FFFF0A           BEQ      ??drawfkeys_9
   \   000000D8   0000D6E5           LDRB     R0,[R6, #+0]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   F5FFFF0A           BEQ      ??drawfkeys_9
   \   000000E4   0000D6E5           LDRB     R0,[R6, #+0]
   \   000000E8   ........           BL       _putch
   \   000000EC   016096E2           ADDS     R6,R6,#+1
   \   000000F0   F3FFFFEA           B        ??drawfkeys_10
    125            }
    126           }
    127          }
   \                     ??drawfkeys_2:
   \   000000F4   F180BDE8           POP      {R0,R4-R7,PC}    ;; return
    128          

   \                                 In section .text, align 4, keep-with-next
    129          void drawframe(int x, int y, int width, int height, int color)
    130          {
   \                     drawframe:
   \   00000000   F8432DE9           PUSH     {R3-R9,LR}
   \   00000004   0060B0E1           MOVS     R6,R0
   \   00000008   0170B0E1           MOVS     R7,R1
   \   0000000C   0240B0E1           MOVS     R4,R2
   \   00000010   0350B0E1           MOVS     R5,R3
   \   00000014   20009DE5           LDR      R0,[SP, #+32]
    131            int i,j;
    132            
    133            textattr(color);
   \   00000018   ........           BL       textattr
    134            gotoxy(x,y);
   \   0000001C   0710B0E1           MOVS     R1,R7
   \   00000020   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000024   0600B0E1           MOVS     R0,R6
   \   00000028   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000002C   ........           BL       gotoxy
    135            
    136            _putch(ACS_ULCORNER);
   \   00000030   DA00A0E3           MOV      R0,#+218
   \   00000034   ........           BL       _putch
    137            for (i=0;i<width+2;i++) 
   \   00000038   0080A0E3           MOV      R8,#+0
   \   0000003C   020000EA           B        ??drawframe_0
    138          	_putch(ACS_HLINE);
   \                     ??drawframe_1:
   \   00000040   C400A0E3           MOV      R0,#+196
   \   00000044   ........           BL       _putch
   \   00000048   018098E2           ADDS     R8,R8,#+1
   \                     ??drawframe_0:
   \   0000004C   020094E2           ADDS     R0,R4,#+2
   \   00000050   000058E1           CMP      R8,R0
   \   00000054   F9FFFFBA           BLT      ??drawframe_1
    139            _putch(ACS_URCORNER);
   \   00000058   BF00A0E3           MOV      R0,#+191
   \   0000005C   ........           BL       _putch
    140            
    141            for (i = 0;i<height;i++) {
   \   00000060   0080A0E3           MOV      R8,#+0
   \   00000064   090000EA           B        ??drawframe_2
    142          	  gotoxy(x,y+i+1);
    143          	  _putch(ACS_VLINE);
    144          	  _putch(' ');
    145             
    146             for (j=0;j<width;j++) {
    147          	    _putch(' ');
   \                     ??drawframe_3:
   \   00000068   2000A0E3           MOV      R0,#+32
   \   0000006C   ........           BL       _putch
    148                }
   \   00000070   019099E2           ADDS     R9,R9,#+1
   \                     ??drawframe_4:
   \   00000074   040059E1           CMP      R9,R4
   \   00000078   FAFFFFBA           BLT      ??drawframe_3
    149                    _putch(' ');
   \   0000007C   2000A0E3           MOV      R0,#+32
   \   00000080   ........           BL       _putch
    150          	  _putch(ACS_VLINE);
   \   00000084   B300A0E3           MOV      R0,#+179
   \   00000088   ........           BL       _putch
   \   0000008C   018098E2           ADDS     R8,R8,#+1
   \                     ??drawframe_2:
   \   00000090   050058E1           CMP      R8,R5
   \   00000094   0D0000AA           BGE      ??drawframe_5
   \   00000098   0700B0E1           MOVS     R0,R7
   \   0000009C   0810B0E1           MOVS     R1,R8
   \   000000A0   000091E0           ADDS     R0,R1,R0
   \   000000A4   011090E2           ADDS     R1,R0,#+1
   \   000000A8   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   000000AC   0600B0E1           MOVS     R0,R6
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   ........           BL       gotoxy
   \   000000B8   B300A0E3           MOV      R0,#+179
   \   000000BC   ........           BL       _putch
   \   000000C0   2000A0E3           MOV      R0,#+32
   \   000000C4   ........           BL       _putch
   \   000000C8   0090A0E3           MOV      R9,#+0
   \   000000CC   E8FFFFEA           B        ??drawframe_4
    151            }
    152           
    153            gotoxy(x,y+height+1);
   \                     ??drawframe_5:
   \   000000D0   070095E0           ADDS     R0,R5,R7
   \   000000D4   011090E2           ADDS     R1,R0,#+1
   \   000000D8   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   000000DC   0600B0E1           MOVS     R0,R6
   \   000000E0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000E4   ........           BL       gotoxy
    154            _putch(ACS_LLCORNER);
   \   000000E8   C000A0E3           MOV      R0,#+192
   \   000000EC   ........           BL       _putch
    155            for (i=0;i<width+2;i++) 
   \   000000F0   0080A0E3           MOV      R8,#+0
   \   000000F4   020000EA           B        ??drawframe_6
    156          	_putch(ACS_HLINE);
   \                     ??drawframe_7:
   \   000000F8   C400A0E3           MOV      R0,#+196
   \   000000FC   ........           BL       _putch
   \   00000100   018098E2           ADDS     R8,R8,#+1
   \                     ??drawframe_6:
   \   00000104   020094E2           ADDS     R0,R4,#+2
   \   00000108   000058E1           CMP      R8,R0
   \   0000010C   F9FFFFBA           BLT      ??drawframe_7
    157            _putch(ACS_LRCORNER);
   \   00000110   D900A0E3           MOV      R0,#+217
   \   00000114   ........           BL       _putch
    158          }
   \   00000118   F183BDE8           POP      {R0,R4-R9,PC}    ;; return

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     drawfkeys     24
     drawframe     32
     runmenu       40


   Section sizes:

     Function/Label Bytes
     -------------- -----
     runmenu         620
     drawfkeys       248
     drawframe       284

 
 1 152 bytes in section .text
 
 1 152 bytes of CODE memory

Errors: none
Warnings: none

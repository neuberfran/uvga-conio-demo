###############################################################################
#                                                                             #
#                                                       01/Apr/2009  17:06:10 #
# IAR ANSI C/C++ Compiler V5.30.0.31174/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  c:\projekty\microvga\uVGALib\str712_iar\71x_it.c         #
#    Command line =  c:\projekty\microvga\uVGALib\str712_iar\71x_it.c -lCN    #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\List\ -o   #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\       #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4 Kickstart\arm\INC\DLib_Config_Normal.h"    #
#                    -I c:\projekty\microvga\uVGALib\str712_iar\include\ -I   #
#                    c:\projekty\microvga\uVGALib\str712_iar\library\inc\ -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Kickstart\arm\INC\" --cpu_mode arm -Ol                   #
#    List file    =  c:\projekty\microvga\uVGALib\str712_iar\debug\List\71x_i #
#                    t.lst                                                    #
#    Object file  =  c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\71x_it #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

c:\projekty\microvga\uVGALib\str712_iar\71x_it.c
      1          /******************** (C) COPYRIGHT 2003 STMicroelectronics ********************
      2          * File Name          : 71x_it.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 16/05/2003
      5          * Description        : Main Interrupt Service Routines
      6          *******************************************************************************
      7          * History:
      8          * 24/05/05 : V3.0
      9          * 30/11/04 : V2.0
     10          * 16/05/03 : Created
     11          *******************************************************************************
     12           THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH
     13           CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     14           AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
     15           OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT
     16           OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION
     17           CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18          *******************************************************************************/
     19          #include "71x_it.h"
     20          
     21          

   \                                 In section .data, align 4
     22           u32 counter=1;
   \                     counter:
   \   00000000   01000000           DC32 1
     23          /*******************************************************************************
     24          * Function Name  : Undefined_Handler
     25          * Description    : This function handles Undefined instruction exception.
     26          * Input          : None
     27          * Output         : None
     28          * Return         : None
     29          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     30          void Undefined_Handler(void)
     31          {
     32          }
   \                     Undefined_Handler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     33          
     34          /*******************************************************************************
     35          * Function Name  : FIQ_Handler
     36          * Description    : This function handles FIQ exception.
     37          * Input          : None
     38          * Output         : None
     39          * Return         : None
     40          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     41          void FIQ_Handler(void)
     42          {
     43          }
   \                     FIQ_Handler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     44          
     45          /*******************************************************************************
     46          * Function Name  : SWI_Handler
     47          * Description    : This function handles SWI exception.
     48          * Input          : None
     49          * Output         : None
     50          * Return         : None
     51          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     52          void SWI_Handler(void)
     53          {
     54          }
   \                     SWI_Handler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     55          
     56          /*******************************************************************************
     57          * Function Name  : Prefetch_Handler
     58          * Description    : This function handles Prefetch Abort exception.
     59          * Input          : None
     60          * Output         : None
     61          * Return         : None
     62          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     63          void Prefetch_Handler(void)
     64          {
     65          }
   \                     Prefetch_Handler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     66          
     67          /*******************************************************************************
     68          * Function Name  : Abort_Handler
     69          * Description    : This function handles Data Abort exception.
     70          * Input          : None
     71          * Output         : None
     72          * Return         : None
     73          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     74          void Abort_Handler(void)
     75          {
     76          }
   \                     Abort_Handler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     77          
     78          /*******************************************************************************
     79          * Function Name  : T0TIMI_IRQHandler
     80          * Description    : This function handles the Timer0 global interrupt.
     81          * Input          : None
     82          * Output         : None
     83          * Return         : None
     84          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     85          void T0TIMI_IRQHandler(void)
     86          {
     87          
     88          	
     89          }
   \                     T0TIMI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     90          
     91          /*******************************************************************************
     92          * Function Name  : FLASH_IRQHandler
     93          * Description    : This function handles the FLASH global interrupt.
     94          * Input          : None
     95          * Output         : None
     96          * Return         : None
     97          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     98          void FLASH_IRQHandler(void)
     99          {
    100          }
   \                     FLASH_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    101          
    102          /*******************************************************************************
    103          * Function Name  : RCCU_IRQHandler
    104          * Description    : This function handles the RCCU global interrupt.
    105          * Input          : None
    106          * Output         : None
    107          * Return         : None
    108          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    109          void RCCU_IRQHandler(void)
    110          {
    111          }
   \                     RCCU_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    112          
    113          /*******************************************************************************
    114          * Function Name  : RTC_IRQHandler
    115          * Description    : This function handles the RTC global interrupt.
    116          * Input          : None
    117          * Output         : None
    118          * Return         : None
    119          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    120          void RTC_IRQHandler(void)
    121          {
    122          }
   \                     RTC_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    123          
    124          /*******************************************************************************
    125          * Function Name  : WDG_IRQHandler
    126          * Description    : This function handles the Watchdog interrupt.
    127          * Input          : None
    128          * Output         : None
    129          * Return         : None
    130          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    131          void WDG_IRQHandler(void)
    132          {
    133          }
   \                     WDG_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    134          
    135          /*******************************************************************************
    136          * Function Name  : XTI_IRQHandler
    137          * Description    : This function handles the External interrupt.
    138          * Input          : None
    139          * Output         : None
    140          * Return         : None
    141          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    142          void XTI_IRQHandler(void)
    143          {
    144          }
   \                     XTI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    145          
    146          /*******************************************************************************
    147          * Function Name  : USBHP_IRQHandler
    148          * Description    : This function handles USB high priority interrupt.
    149          * Input          : None
    150          * Output         : None
    151          * Return         : None
    152          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    153          void USBHP_IRQHandler(void)
    154          {
    155          }
   \                     USBHP_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    156          
    157          /*******************************************************************************
    158          * Function Name  : I2C0ITERR_IRQHandler
    159          * Description    : This function handles the I2C0 error interrupt.
    160          * Input          : None
    161          * Output         : None
    162          * Return         : None
    163          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    164          void I2C0ITERR_IRQHandler(void)
    165          {
    166          }
   \                     I2C0ITERR_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    167          
    168          /*******************************************************************************
    169          * Function Name  : I2C1ITERR_IRQHandler
    170          * Description    : This function handles the I2C1 error interrupt.
    171          * Input          : None
    172          * Output         : None
    173          * Return         : None
    174          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    175          void I2C1ITERR_IRQHandler(void)
    176          {
    177          }
   \                     I2C1ITERR_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    178          
    179          /*******************************************************************************
    180          * Function Name  : UART0_IRQHandler
    181          * Description    : This function handles the UART0 global interrupt.
    182          * Input          : None
    183          * Output         : None
    184          * Return         : None
    185          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    186          void UART0_IRQHandler(void)
    187          {
    188          }
   \                     UART0_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    189          
    190          /*******************************************************************************
    191          * Function Name  : UART1_IRQHandler
    192          * Description    : This function handles the UART1 global interrupt.
    193          * Input          : None
    194          * Output         : None
    195          * Return         : None
    196          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    197          void UART1_IRQHandler(void)
    198          {
    199          }
   \                     UART1_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    200          
    201          /*******************************************************************************
    202          * Function Name  : UART2_IRQHandler
    203          * Description    : This function handles the UART2 global interrupt.
    204          * Input          : None
    205          * Output         : None
    206          * Return         : None
    207          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    208          void UART2_IRQHandler(void)
    209          {
    210          }
   \                     UART2_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    211          
    212          /*******************************************************************************
    213          * Function Name  : UART3_IRQHandler
    214          * Description    : This function handles the UART3 global interrupt.
    215          * Input          : None
    216          * Output         : None
    217          * Return         : None
    218          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    219          void UART3_IRQHandler(void)
    220          {
    221          }
   \                     UART3_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    222          
    223          /*******************************************************************************
    224          * Function Name  : BSPI0_IRQHandler
    225          * Description    : This function handles the BSPI0 global interrupt.
    226          * Input          : None
    227          * Output         : None
    228          * Return         : None
    229          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    230          void BSPI0_IRQHandler(void)
    231          {
    232          }
   \                     BSPI0_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    233          
    234          /*******************************************************************************
    235          * Function Name  : BSPI1_IRQHandler
    236          * Description    : This function handles the BSPI1 global interrupt.
    237          * Input          : None
    238          * Output         : None
    239          * Return         : None
    240          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    241          void BSPI1_IRQHandler(void)
    242          {
    243          }
   \                     BSPI1_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    244          
    245          /*******************************************************************************
    246          * Function Name  : I2C0_IRQHandler
    247          * Description    : This function handles the I2C0 global interrupt.
    248          * Input          : None
    249          * Output         : None
    250          * Return         : None
    251          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    252          void I2C0_IRQHandler(void)
    253          {
    254          }
   \                     I2C0_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    255          
    256          /*******************************************************************************
    257          * Function Name  : I2C1_IRQHandler
    258          * Description    : This function handles the I2C1 global interrupt.
    259          * Input          : None
    260          * Output         : None
    261          * Return         : None
    262          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    263          void I2C1_IRQHandler(void)
    264          {
    265          
    266          }
   \                     I2C1_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    267          
    268          /*******************************************************************************
    269          * Function Name  : CAN_IRQHandler
    270          * Description    : This function handles the CAN module global interrupt.
    271          * Input          : None
    272          * Output         : None
    273          * Return         : None
    274          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    275          void CAN_IRQHandler(void)
    276          {
    277          }
   \                     CAN_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    278          
    279          /*******************************************************************************
    280          * Function Name  : ADC12_IRQHandler
    281          * Description    : This function handles the ADC sample ready interrupt.
    282          * Input          : None
    283          * Output         : None
    284          * Return         : None
    285          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    286          void ADC12_IRQHandler(void)
    287          {
    288          }
   \                     ADC12_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    289          
    290          /*******************************************************************************
    291          * Function Name  : T1TIMI_IRQHandler
    292          * Description    : This function handles Timer1 global interrupt.
    293          * Input          : None
    294          * Output         : None
    295          * Return         : None
    296          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    297          void T1TIMI_IRQHandler(void)
    298          {
    299          }
   \                     T1TIMI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    300          
    301          /*******************************************************************************
    302          * Function Name  : T2TIMI_IRQHandler
    303          * Description    : This function handles Timer2 global interrupt.
    304          * Input          : None
    305          * Output         : None
    306          * Return         : None
    307          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    308          void T2TIMI_IRQHandler(void)
    309          {
    310          }
   \                     T2TIMI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    311          
    312          /*******************************************************************************
    313          * Function Name  : T3TIMI_IRQHandler
    314          * Description    : This function handles Timer3 global interrupt.
    315          * Input          : None
    316          * Output         : None
    317          * Return         : None
    318          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    319          void T3TIMI_IRQHandler(void)
    320          {
    321          }
   \                     T3TIMI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    322          
    323          /*******************************************************************************
    324          * Function Name  : HDLC_IRQHandler
    325          * Description    : This function handles HDLC global interrupt.
    326          * Input          : None
    327          * Output         : None
    328          * Return         : None
    329          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    330          void HDLC_IRQHandler(void)
    331          {
    332          }
   \                     HDLC_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    333          
    334          /*******************************************************************************
    335          * Function Name  : USBLP_IRQHandler
    336          * Description    : This function handles USB low priority event interrupt.
    337          * Input          : None
    338          * Output         : None
    339          * Return         : None
    340          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    341          void USBLP_IRQHandler(void)
    342          {
    343          }
   \                     USBLP_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    344          
    345          /*******************************************************************************
    346          * Function Name  : T0TOI_IRQHandler
    347          * Description    : This function handles the Timer0 overflow interrupt.
    348          * Input          : None
    349          * Output         : None
    350          * Return         : None
    351          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    352          void T0TOI_IRQHandler(void)
    353          {
    354          }
   \                     T0TOI_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    355          
    356          /*******************************************************************************
    357          * Function Name  : T0OC1_IRQHandler
    358          * Description    : This function handles the Timer0 Output compare 1 interrupt.
    359          * Input          : None
    360          * Output         : None
    361          * Return         : None
    362          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    363          void T0OC1_IRQHandler(void)
    364          {
    365          }
   \                     T0OC1_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    366          
    367          /*******************************************************************************
    368          * Function Name  : T0OC2_IRQHandler
    369          * Description    : This function handles the Timer0 Output compare 2 interrupt.
    370          * Input          : None
    371          * Output         : None
    372          * Return         : None
    373          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    374          void T0OC2_IRQHandler(void)
    375          {
    376          }
   \                     T0OC2_IRQHandler:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    377          
    378          /******************* (C) COPYRIGHT 2003 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ADC12_IRQHandler          0
     Abort_Handler             0
     BSPI0_IRQHandler          0
     BSPI1_IRQHandler          0
     CAN_IRQHandler            0
     FIQ_Handler               0
     FLASH_IRQHandler          0
     HDLC_IRQHandler           0
     I2C0ITERR_IRQHandler      0
     I2C0_IRQHandler           0
     I2C1ITERR_IRQHandler      0
     I2C1_IRQHandler           0
     Prefetch_Handler          0
     RCCU_IRQHandler           0
     RTC_IRQHandler            0
     SWI_Handler               0
     T0OC1_IRQHandler          0
     T0OC2_IRQHandler          0
     T0TIMI_IRQHandler         0
     T0TOI_IRQHandler          0
     T1TIMI_IRQHandler         0
     T2TIMI_IRQHandler         0
     T3TIMI_IRQHandler         0
     UART0_IRQHandler          0
     UART1_IRQHandler          0
     UART2_IRQHandler          0
     UART3_IRQHandler          0
     USBHP_IRQHandler          0
     USBLP_IRQHandler          0
     Undefined_Handler         0
     WDG_IRQHandler            0
     XTI_IRQHandler            0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     counter                 4
     Undefined_Handler       4
     FIQ_Handler             4
     SWI_Handler             4
     Prefetch_Handler        4
     Abort_Handler           4
     T0TIMI_IRQHandler       4
     FLASH_IRQHandler        4
     RCCU_IRQHandler         4
     RTC_IRQHandler          4
     WDG_IRQHandler          4
     XTI_IRQHandler          4
     USBHP_IRQHandler        4
     I2C0ITERR_IRQHandler    4
     I2C1ITERR_IRQHandler    4
     UART0_IRQHandler        4
     UART1_IRQHandler        4
     UART2_IRQHandler        4
     UART3_IRQHandler        4
     BSPI0_IRQHandler        4
     BSPI1_IRQHandler        4
     I2C0_IRQHandler         4
     I2C1_IRQHandler         4
     CAN_IRQHandler          4
     ADC12_IRQHandler        4
     T1TIMI_IRQHandler       4
     T2TIMI_IRQHandler       4
     T3TIMI_IRQHandler       4
     HDLC_IRQHandler         4
     USBLP_IRQHandler        4
     T0TOI_IRQHandler        4
     T0OC1_IRQHandler        4
     T0OC2_IRQHandler        4

 
   4 bytes in section .data
 128 bytes in section .text
 
 128 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
#                                                       01/Apr/2009  17:06:11 #
# IAR ANSI C/C++ Compiler V5.30.0.31174/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  c:\projekty\microvga\uVGALib\lib\conio.c                 #
#    Command line =  c:\projekty\microvga\uVGALib\lib\conio.c -lCN            #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\List\ -o   #
#                    c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\       #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=ARM7TDMI -e --fpu=None             #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4 Kickstart\arm\INC\DLib_Config_Normal.h"    #
#                    -I c:\projekty\microvga\uVGALib\str712_iar\include\ -I   #
#                    c:\projekty\microvga\uVGALib\str712_iar\library\inc\ -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Kickstart\arm\INC\" --cpu_mode arm -Ol                   #
#    List file    =  c:\projekty\microvga\uVGALib\str712_iar\debug\List\conio #
#                    .lst                                                     #
#    Object file  =  c:\projekty\microvga\uVGALib\str712_iar\debug\Obj\conio. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

c:\projekty\microvga\uVGALib\lib\conio.c
      1          /*
      2              conio.c
      3              Standard conio routines.
      4              Part of MicroVGA CONIO library / demo project
      5              Copyright (c) 2008-9 SECONS s.r.o., http://www.MicroVGA.com
      6          
      7              This program is free software: you can redistribute it and/or modify
      8              it under the terms of the GNU General Public License as published by
      9              the Free Software Foundation, either version 3 of the License, or
     10              (at your option) any later version.
     11          
     12              This program is distributed in the hope that it will be useful,
     13              but WITHOUT ANY WARRANTY; without even the implied warranty of
     14              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     15              GNU General Public License for more details.
     16          
     17              You should have received a copy of the GNU General Public License
     18              along with this program.  If not, see <http://www.gnu.org/licenses/>.
     19          */
     20          
     21          #include "../h/conio.h"
     22          #include "../h/kbd.h"
     23          
     24          

   \                                 In section .text, align 4, keep-with-next
     25          void clrscr(void)
     26          {
   \                     clrscr:
   \   00000000   00502DE9           PUSH     {R12,LR}
     27            _putch('\033');
   \   00000004   1B00A0E3           MOV      R0,#+27
   \   00000008   ........           BL       _putch
     28            _putch('[');
   \   0000000C   5B00A0E3           MOV      R0,#+91
   \   00000010   ........           BL       _putch
     29            _putch('2');
   \   00000014   3200A0E3           MOV      R0,#+50
   \   00000018   ........           BL       _putch
     30            _putch('J');
   \   0000001C   4A00A0E3           MOV      R0,#+74
   \   00000020   ........           BL       _putch
     31          }
   \   00000024   0180BDE8           POP      {R0,PC}          ;; return
     32          

   \                                 In section .text, align 4, keep-with-next
     33          void clreol(void)
     34          {
   \                     clreol:
   \   00000000   00502DE9           PUSH     {R12,LR}
     35            _putch('\033');
   \   00000004   1B00A0E3           MOV      R0,#+27
   \   00000008   ........           BL       _putch
     36            _putch('[');
   \   0000000C   5B00A0E3           MOV      R0,#+91
   \   00000010   ........           BL       _putch
     37            _putch('K');
   \   00000014   4B00A0E3           MOV      R0,#+75
   \   00000018   ........           BL       _putch
     38          }
   \   0000001C   0180BDE8           POP      {R0,PC}          ;; return
     39          
     40          

   \                                 In section .text, align 4, keep-with-next
     41          void cursoron(void)
     42          {
   \                     cursoron:
   \   00000000   00502DE9           PUSH     {R12,LR}
     43            _putch('\033');
   \   00000004   1B00A0E3           MOV      R0,#+27
   \   00000008   ........           BL       _putch
     44            _putch('[');
   \   0000000C   5B00A0E3           MOV      R0,#+91
   \   00000010   ........           BL       _putch
     45            _putch('2');
   \   00000014   3200A0E3           MOV      R0,#+50
   \   00000018   ........           BL       _putch
     46            _putch('5');
   \   0000001C   3500A0E3           MOV      R0,#+53
   \   00000020   ........           BL       _putch
     47            _putch('h');
   \   00000024   6800A0E3           MOV      R0,#+104
   \   00000028   ........           BL       _putch
     48          }
   \   0000002C   0180BDE8           POP      {R0,PC}          ;; return
     49          

   \                                 In section .text, align 4, keep-with-next
     50          void cursoroff(void)
     51          {
   \                     cursoroff:
   \   00000000   00502DE9           PUSH     {R12,LR}
     52            _putch('\033');
   \   00000004   1B00A0E3           MOV      R0,#+27
   \   00000008   ........           BL       _putch
     53            _putch('[');
   \   0000000C   5B00A0E3           MOV      R0,#+91
   \   00000010   ........           BL       _putch
     54            _putch('2');
   \   00000014   3200A0E3           MOV      R0,#+50
   \   00000018   ........           BL       _putch
     55            _putch('5');
   \   0000001C   3500A0E3           MOV      R0,#+53
   \   00000020   ........           BL       _putch
     56            _putch('l');
   \   00000024   6C00A0E3           MOV      R0,#+108
   \   00000028   ........           BL       _putch
     57          }
   \   0000002C   0180BDE8           POP      {R0,PC}          ;; return
     58          

   \                                 In section .text, align 4, keep-with-next
     59          void textcolor(int color)
     60          {
   \                     textcolor:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     61            _putch('\033');
   \   00000008   1B00A0E3           MOV      R0,#+27
   \   0000000C   ........           BL       _putch
     62            _putch('[');
   \   00000010   5B00A0E3           MOV      R0,#+91
   \   00000014   ........           BL       _putch
     63            if (color & 0x8) 
   \   00000018   080014E3           TST      R4,#0x8
   \   0000001C   0200000A           BEQ      ??textcolor_0
     64          	  _putch('1');
   \   00000020   3100A0E3           MOV      R0,#+49
   \   00000024   ........           BL       _putch
   \   00000028   010000EA           B        ??textcolor_1
     65            else _putch('2');
   \                     ??textcolor_0:
   \   0000002C   3200A0E3           MOV      R0,#+50
   \   00000030   ........           BL       _putch
     66            _putch('m');
   \                     ??textcolor_1:
   \   00000034   6D00A0E3           MOV      R0,#+109
   \   00000038   ........           BL       _putch
     67          
     68            _putch('\033');
   \   0000003C   1B00A0E3           MOV      R0,#+27
   \   00000040   ........           BL       _putch
     69            _putch('[');
   \   00000044   5B00A0E3           MOV      R0,#+91
   \   00000048   ........           BL       _putch
     70            _putch('3');
   \   0000004C   3300A0E3           MOV      R0,#+51
   \   00000050   ........           BL       _putch
     71            _putch(((color&0x7)%10)+'0');
   \   00000054   070014E2           ANDS     R0,R4,#0x7
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   ........           BL       __aeabi_idivmod
   \   00000060   300091E2           ADDS     R0,R1,#+48
   \   00000064   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000068   ........           BL       _putch
     72            _putch('m');
   \   0000006C   6D00A0E3           MOV      R0,#+109
   \   00000070   ........           BL       _putch
     73          }
   \   00000074   1080BDE8           POP      {R4,PC}          ;; return
     74          

   \                                 In section .text, align 4, keep-with-next
     75          void textbackground(int color)
     76          {
   \                     textbackground:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     77            _putch('\033');
   \   00000008   1B00A0E3           MOV      R0,#+27
   \   0000000C   ........           BL       _putch
     78            _putch('[');
   \   00000010   5B00A0E3           MOV      R0,#+91
   \   00000014   ........           BL       _putch
     79            if (color & 0x8) 
   \   00000018   080014E3           TST      R4,#0x8
   \   0000001C   0200000A           BEQ      ??textbackground_0
     80          	  _putch('5');
   \   00000020   3500A0E3           MOV      R0,#+53
   \   00000024   ........           BL       _putch
   \   00000028   010000EA           B        ??textbackground_1
     81            else _putch('6');
   \                     ??textbackground_0:
   \   0000002C   3600A0E3           MOV      R0,#+54
   \   00000030   ........           BL       _putch
     82            _putch('m');
   \                     ??textbackground_1:
   \   00000034   6D00A0E3           MOV      R0,#+109
   \   00000038   ........           BL       _putch
     83          
     84            _putch('\033');
   \   0000003C   1B00A0E3           MOV      R0,#+27
   \   00000040   ........           BL       _putch
     85            _putch('[');
   \   00000044   5B00A0E3           MOV      R0,#+91
   \   00000048   ........           BL       _putch
     86            _putch('4');
   \   0000004C   3400A0E3           MOV      R0,#+52
   \   00000050   ........           BL       _putch
     87            _putch((color&0x7)+'0');
   \   00000054   070014E2           ANDS     R0,R4,#0x7
   \   00000058   300090E2           ADDS     R0,R0,#+48
   \   0000005C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000060   ........           BL       _putch
     88            _putch('m');
   \   00000064   6D00A0E3           MOV      R0,#+109
   \   00000068   ........           BL       _putch
     89          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
     90          

   \                                 In section .text, align 4, keep-with-next
     91          void textattr(int attr)
     92          {
   \                     textattr:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     93            textcolor(attr&0xF);
   \   00000008   0F0014E2           ANDS     R0,R4,#0xF
   \   0000000C   ........           BL       textcolor
     94            textbackground(attr>>4);
   \   00000010   4402B0E1           ASRS     R0,R4,#+4
   \   00000014   ........           BL       textbackground
     95          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     96          

   \                                 In section .text, align 4, keep-with-next
     97          void gotoxy(char x, char y)
     98          {
   \                     gotoxy:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     99            if (x>MAX_X || y>MAX_Y)
   \   0000000C   FF4014E2           ANDS     R4,R4,#0xFF      ;; Zero extend
   \   00000010   510054E3           CMP      R4,#+81
   \   00000014   0200002A           BCS      ??gotoxy_0
   \   00000018   FF5015E2           ANDS     R5,R5,#0xFF      ;; Zero extend
   \   0000001C   1A0055E3           CMP      R5,#+26
   \   00000020   0000003A           BCC      ??gotoxy_1
    100              return;
   \                     ??gotoxy_0:
   \   00000024   250000EA           B        ??gotoxy_2
    101            
    102            x--;
   \                     ??gotoxy_1:
   \   00000028   014054E2           SUBS     R4,R4,#+1
    103            y--;
   \   0000002C   015055E2           SUBS     R5,R5,#+1
    104          
    105            _putch(0x1B);
   \   00000030   1B00A0E3           MOV      R0,#+27
   \   00000034   ........           BL       _putch
    106            _putch('[');
   \   00000038   5B00A0E3           MOV      R0,#+91
   \   0000003C   ........           BL       _putch
    107            _putch((y/10)+'0');
   \   00000040   0500B0E1           MOVS     R0,R5
   \   00000044   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000048   0A10A0E3           MOV      R1,#+10
   \   0000004C   ........           BL       __aeabi_idivmod
   \   00000050   300090E2           ADDS     R0,R0,#+48
   \   00000054   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000058   ........           BL       _putch
    108            _putch((y%10)+'0');
   \   0000005C   FF5015E2           ANDS     R5,R5,#0xFF      ;; Zero extend
   \   00000060   0500B0E1           MOVS     R0,R5
   \   00000064   0A10A0E3           MOV      R1,#+10
   \   00000068   ........           BL       __aeabi_idivmod
   \   0000006C   300091E2           ADDS     R0,R1,#+48
   \   00000070   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000074   ........           BL       _putch
    109            _putch(';');
   \   00000078   3B00A0E3           MOV      R0,#+59
   \   0000007C   ........           BL       _putch
    110            _putch((x/10)+'0');
   \   00000080   0400B0E1           MOVS     R0,R4
   \   00000084   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000088   0A10A0E3           MOV      R1,#+10
   \   0000008C   ........           BL       __aeabi_idivmod
   \   00000090   300090E2           ADDS     R0,R0,#+48
   \   00000094   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000098   ........           BL       _putch
    111            _putch((x%10)+'0');
   \   0000009C   FF4014E2           ANDS     R4,R4,#0xFF      ;; Zero extend
   \   000000A0   0400B0E1           MOVS     R0,R4
   \   000000A4   0A10A0E3           MOV      R1,#+10
   \   000000A8   ........           BL       __aeabi_idivmod
   \   000000AC   300091E2           ADDS     R0,R1,#+48
   \   000000B0   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000B4   ........           BL       _putch
    112            _putch('f');
   \   000000B8   6600A0E3           MOV      R0,#+102
   \   000000BC   ........           BL       _putch
    113          }
   \                     ??gotoxy_2:
   \   000000C0   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
    114          
    115          

   \                                 In section .text, align 4, keep-with-next
    116          void _cputs(const char *s)
    117          {
   \                     _cputs:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   020000EA           B        ??_cputs_0
    118             while (*s != 0) 
    119              _putch(*s++);
   \                     ??_cputs_1:
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   ........           BL       _putch
   \   00000014   014094E2           ADDS     R4,R4,#+1
   \                     ??_cputs_0:
   \   00000018   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F9FFFF1A           BNE      ??_cputs_1
    120          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    121          

   \                                 In section .text, align 4, keep-with-next
    122          char * _cgets(char *s)
    123          {
   \                     _cgets:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    124            char len;
    125            int ch;
    126            
    127            len=0;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   070000EA           B        ??_cgets_0
    128          
    129            while (s[0]>len)
    130            {
    131              ch=_getch();
    132              
    133              if (ch==KB_ENTER)
    134                break; //enter hit, end of input
    135          
    136              if (ch==KB_ESC) {
    137                s[1]=0;
    138                s[2]=0;
    139                return &s[2]; 
    140              }
    141          
    142              
    143              if (ch==KB_BACK)
    144              {
    145                
    146                  if (len>0) 
    147                  {
    148                      len--;
    149                      //delete char and go back (if some chars left)
    150                      _putch(KB_BACK);
    151                      _putch(' '); 
    152                      _putch(KB_BACK);
    153                     
    154                  }
    155                   
    156                   continue;
    157              }
    158          
    159              if (ch>0x80 || ch <' ') //skip functions keys
    160                  continue;
    161            
    162              _putch((char)0xff&ch); //print back to screen
   \                     ??_cgets_1:
   \   00000010   0600B0E1           MOVS     R0,R6
   \   00000014   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000018   ........           BL       _putch
    163              s[len+2]=(char)0xff&ch;
   \   0000001C   0500B0E1           MOVS     R0,R5
   \   00000020   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000024   040090E0           ADDS     R0,R0,R4
   \   00000028   0260C0E5           STRB     R6,[R0, #+2]
    164              len++;
   \   0000002C   015095E2           ADDS     R5,R5,#+1
   \                     ??_cgets_2:
   \                     ??_cgets_0:
   \   00000030   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000034   FF5015E2           ANDS     R5,R5,#0xFF      ;; Zero extend
   \   00000038   000055E1           CMP      R5,R0
   \   0000003C   1D00002A           BCS      ??_cgets_3
   \   00000040   ........           BL       _getch
   \   00000044   0060B0E1           MOVS     R6,R0
   \   00000048   0A0056E3           CMP      R6,#+10
   \   0000004C   1900000A           BEQ      ??_cgets_4
   \                     ??_cgets_5:
   \   00000050   1B0056E3           CMP      R6,#+27
   \   00000054   0500001A           BNE      ??_cgets_6
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0100C4E5           STRB     R0,[R4, #+1]
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   0200C4E5           STRB     R0,[R4, #+2]
   \   00000068   020094E2           ADDS     R0,R4,#+2
   \   0000006C   170000EA           B        ??_cgets_7
   \                     ??_cgets_6:
   \   00000070   080056E3           CMP      R6,#+8
   \   00000074   0A00001A           BNE      ??_cgets_8
   \   00000078   FF5015E2           ANDS     R5,R5,#0xFF      ;; Zero extend
   \   0000007C   010055E3           CMP      R5,#+1
   \   00000080   0600003A           BCC      ??_cgets_9
   \   00000084   015055E2           SUBS     R5,R5,#+1
   \   00000088   0800A0E3           MOV      R0,#+8
   \   0000008C   ........           BL       _putch
   \   00000090   2000A0E3           MOV      R0,#+32
   \   00000094   ........           BL       _putch
   \   00000098   0800A0E3           MOV      R0,#+8
   \   0000009C   ........           BL       _putch
   \                     ??_cgets_9:
   \   000000A0   E2FFFFEA           B        ??_cgets_2
   \                     ??_cgets_8:
   \   000000A4   810056E3           CMP      R6,#+129
   \   000000A8   010000AA           BGE      ??_cgets_10
   \   000000AC   200056E3           CMP      R6,#+32
   \   000000B0   D6FFFFAA           BGE      ??_cgets_1
   \                     ??_cgets_10:
   \   000000B4   DDFFFFEA           B        ??_cgets_2
    165            }
    166            
    167            s[1]=len;
   \                     ??_cgets_3:
   \                     ??_cgets_4:
   \   000000B8   0150C4E5           STRB     R5,[R4, #+1]
    168            s[len+2]=0;
   \   000000BC   FF5015E2           ANDS     R5,R5,#0xFF      ;; Zero extend
   \   000000C0   040095E0           ADDS     R0,R5,R4
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   0210C0E5           STRB     R1,[R0, #+2]
    169          
    170            return &s[2]; 
   \   000000CC   020094E2           ADDS     R0,R4,#+2
   \                     ??_cgets_7:
   \   000000D0   7080BDE8           POP      {R4-R6,PC}       ;; return
    171          }

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     _cgets             16
     _cputs              8
     clreol              8
     clrscr              8
     cursoroff           8
     cursoron            8
     gotoxy             16
     textattr            8
     textbackground      8
     textcolor           8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     clrscr           40
     clreol           32
     cursoron         48
     cursoroff        48
     textcolor       120
     textbackground  112
     textattr         28
     gotoxy          196
     _cputs           40
     _cgets          212

 
 876 bytes in section .text
 
 876 bytes of CODE memory

Errors: none
Warnings: none

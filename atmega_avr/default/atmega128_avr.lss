
atmega128_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  00000c56  00000cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000080  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000191  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007fd  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003cc  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c0c  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000259  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000074a  00000000  00000000  00002cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 3e       	cpi	r26, 0xEE	; 238
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 b0 01 	call	0x360	; 0x360 <main>
  b6:	0c 94 29 06 	jmp	0xc52	; 0xc52 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <submenutest>:
  }
}


void submenutest()
{
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0

 item = 0;

 while (1) {

	item = runmenu(8,10, submenu1, item);
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	6a e0       	ldi	r22, 0x0A	; 10
  c6:	44 ed       	ldi	r20, 0xD4	; 212
  c8:	52 e0       	ldi	r21, 0x02	; 2
  ca:	0e 94 9b 04 	call	0x936	; 0x936 <runmenu>
  ce:	9c 01       	movw	r18, r24
	switch (item) {
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	b9 f7       	brne	.-18     	; 0xc2 <submenutest+0x4>
		case 0: return ;
	}
 }
}
  d4:	08 95       	ret

000000d6 <speedtest>:
    }
}


void speedtest(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  unsigned int i;

  gotoxy(1,1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
  textattr(GREEN<<4 | YELLOW);
  e2:	8b e2       	ldi	r24, 0x2B	; 43
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0

  for (i=0;i<50000;i++) {
    _cputs("TEST50=>");
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
    _putch(((i/10000)%10) + '0');
  f6:	ce 01       	movw	r24, r28
  f8:	60 e1       	ldi	r22, 0x10	; 16
  fa:	77 e2       	ldi	r23, 0x27	; 39
  fc:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodhi4>
 100:	cb 01       	movw	r24, r22
 102:	6a e0       	ldi	r22, 0x0A	; 10
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodhi4>
 10a:	80 5d       	subi	r24, 0xD0	; 208
 10c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
    _putch(((i/1000)%10) + '0');
 110:	ce 01       	movw	r24, r28
 112:	68 ee       	ldi	r22, 0xE8	; 232
 114:	73 e0       	ldi	r23, 0x03	; 3
 116:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodhi4>
 11a:	cb 01       	movw	r24, r22
 11c:	6a e0       	ldi	r22, 0x0A	; 10
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 02 06 	call	0xc04	; 0xc04 <__udivmodhi4>
 124:	80 5d       	subi	r24, 0xD0	; 208
 126:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	_cputs("\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08");
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
  unsigned int i;

  gotoxy(1,1);
  textattr(GREEN<<4 | YELLOW);

  for (i=0;i<50000;i++) {
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	83 ec       	ldi	r24, 0xC3	; 195
 136:	c0 35       	cpi	r28, 0x50	; 80
 138:	d8 07       	cpc	r29, r24
 13a:	c9 f6       	brne	.-78     	; 0xee <speedtest+0x18>
    _cputs("TEST50=>");
    _putch(((i/10000)%10) + '0');
    _putch(((i/1000)%10) + '0');
	_cputs("\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08");
  }
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <cli>:
 }
}


void cli()
{
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	a8 97       	sbiw	r28, 0x28	; 40
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
    char buffer[40];
    char * out;

    textattr(LIGHTGRAY);
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
    
    clrscr();
 164:	0e 94 b7 03 	call	0x76e	; 0x76e <clrscr>
    
    while (1) {
      //read data
      buffer[0]=40;
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	f8 2e       	mov	r15, r24
       
      textattr(YELLOW);
      _cputs("uVGA> ");
      textattr(LIGHTGRAY);
      out=_cgets(buffer);
 16c:	8e 01       	movw	r16, r28
 16e:	0f 5f       	subi	r16, 0xFF	; 255
 170:	1f 4f       	sbci	r17, 0xFF	; 255
    
    clrscr();
    
    while (1) {
      //read data
      buffer[0]=40;
 172:	f9 82       	std	Y+1, r15	; 0x01
       
      textattr(YELLOW);
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
      _cputs("uVGA> ");
 17c:	84 e1       	ldi	r24, 0x14	; 20
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
      textattr(LIGHTGRAY);
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
      out=_cgets(buffer);
 18c:	c8 01       	movw	r24, r16
 18e:	0e 94 9f 02 	call	0x53e	; 0x53e <_cgets>
 192:	fc 01       	movw	r30, r24
      
      if (out != 0 && out[0] == 'q' && out[1] == 0)
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	31 f0       	breq	.+12     	; 0x1a4 <cli+0x62>
 198:	80 81       	ld	r24, Z
 19a:	81 37       	cpi	r24, 0x71	; 113
 19c:	19 f4       	brne	.+6      	; 0x1a4 <cli+0x62>
 19e:	81 81       	ldd	r24, Z+1	; 0x01
 1a0:	88 23       	and	r24, r24
 1a2:	c9 f0       	breq	.+50     	; 0x1d6 <cli+0x94>
        return ;
      
      textattr(WHITE);
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
      _cputs("\r\nUnsupported command. Only ");
 1ac:	8b e1       	ldi	r24, 0x1B	; 27
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
      textattr(LIGHTRED);
 1b4:	89 e0       	ldi	r24, 0x09	; 9
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
      _cputs("q");
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
      textattr(WHITE);
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
      _cputs(" (exit) is supported.\r\n");
 1cc:	8a e3       	ldi	r24, 0x3A	; 58
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
 1d4:	ce cf       	rjmp	.-100    	; 0x172 <cli+0x30>
    }
}
 1d6:	a8 96       	adiw	r28, 0x28	; 40
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	08 95       	ret

000001ee <testCGetS>:
	 while (_getch() != KB_ESC);
 #endif
}

void testCGetS()
{
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	df 93       	push	r29
 1f4:	cf 93       	push	r28
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	a8 97       	sbiw	r28, 0x28	; 40
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
        char buffer[40];
        char * out;
        int i;
             
        //draw input dialog (frame)
        drawframe(10, 10, 40, 9, WHITE  | RED <<4);
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	6a e0       	ldi	r22, 0x0A	; 10
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	48 e2       	ldi	r20, 0x28	; 40
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	29 e0       	ldi	r18, 0x09	; 9
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	0f e1       	ldi	r16, 0x1F	; 31
 218:	10 e0       	ldi	r17, 0x00	; 0
 21a:	0e 94 c4 03 	call	0x788	; 0x788 <drawframe>
        gotoxy(12,12);
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	6c e0       	ldi	r22, 0x0C	; 12
 222:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
        _cputs("Enter your name:");       
 226:	82 e5       	ldi	r24, 0x52	; 82
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
        gotoxy(12,14);
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	6e e0       	ldi	r22, 0x0E	; 14
 232:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
        textattr(WHITE  | BLACK <<4);
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<40;i++)
          _putch(' ');
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
        drawframe(10, 10, 40, 9, WHITE  | RED <<4);
        gotoxy(12,12);
        _cputs("Enter your name:");       
        gotoxy(12,14);
        textattr(WHITE  | BLACK <<4);
        for (i=0;i<40;i++)
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	08 32       	cpi	r16, 0x28	; 40
 24e:	11 05       	cpc	r17, r1
 250:	c1 f7       	brne	.-16     	; 0x242 <testCGetS+0x54>
          _putch(' ');
        
        //read data
        gotoxy(12,14);
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	6e e0       	ldi	r22, 0x0E	; 14
 256:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
        buffer[0]=40;
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	89 83       	std	Y+1, r24	; 0x01
         
        out=_cgets(buffer);
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	0e 94 9f 02 	call	0x53e	; 0x53e <_cgets>
 266:	8c 01       	movw	r16, r24
        
        //write read data
        gotoxy(12,16);
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	60 e1       	ldi	r22, 0x10	; 16
 26c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
        if (buffer[1]==0)
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 23       	and	r24, r24
 274:	39 f4       	brne	.+14     	; 0x284 <testCGetS+0x96>
        {
             textattr((WHITE | RED <<4)|BLINK);
 276:	8f e9       	ldi	r24, 0x9F	; 159
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
            _cputs("You didn't enter your name!");
 27e:	83 e6       	ldi	r24, 0x63	; 99
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0d c0       	rjmp	.+26     	; 0x29e <testCGetS+0xb0>
        }
        else
        {
             textattr((WHITE | RED <<4));
 284:	8f e1       	ldi	r24, 0x1F	; 31
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
            _cputs("Your name is:\n");
 28c:	8f e7       	ldi	r24, 0x7F	; 127
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
            gotoxy(12,17);
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	61 e1       	ldi	r22, 0x11	; 17
 298:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
            _cputs(out);
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
        }
        cursoroff();
 2a2:	0e 94 8d 03 	call	0x71a	; 0x71a <cursoroff>

        gotoxy(23,19);
 2a6:	87 e1       	ldi	r24, 0x17	; 23
 2a8:	63 e1       	ldi	r22, 0x13	; 19
 2aa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
        textattr((WHITE | RED <<4)|BLINK);
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
        _cputs("PRESS ESC TO EXIT");
 2b6:	8e e8       	ldi	r24, 0x8E	; 142
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
        
        //wait for ESC press
        while (_getch() != KB_ESC);
 2be:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
 2c2:	4b 97       	sbiw	r24, 0x1b	; 27
 2c4:	e1 f7       	brne	.-8      	; 0x2be <testCGetS+0xd0>
}
 2c6:	a8 96       	adiw	r28, 0x28	; 40
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <ascii_art>:
	 clrscr();
	_cputs((const char *)ascii_art_str);
	
	 while (_getch() != KB_ESC);
 #else
         textattr(LIGHTGRAY);
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
	 clrscr();
 2e4:	0e 94 b7 03 	call	0x76e	; 0x76e <clrscr>
	_cputs("Not enought memory for this feature");
 2e8:	80 ea       	ldi	r24, 0xA0	; 160
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
	
	 while (_getch() != KB_ESC);
 2f0:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
 2f4:	4b 97       	sbiw	r24, 0x1b	; 27
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <ascii_art+0x14>
 #endif
}
 2f8:	08 95       	ret

000002fa <memviewer>:
     } 
  // }

 }
 #else
  textattr(LIGHTGRAY);
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
  clrscr();
 302:	0e 94 b7 03 	call	0x76e	; 0x76e <clrscr>
  _cputs("Not enought memory for this feature");
 306:	80 ea       	ldi	r24, 0xA0	; 160
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
	
   while (_getch() != KB_ESC);
 30e:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
 312:	4b 97       	sbiw	r24, 0x1b	; 27
 314:	e1 f7       	brne	.-8      	; 0x30e <memviewer+0x14>
 #endif
}
 316:	08 95       	ret

00000318 <debugdemo>:

void debugdemo()
{
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 int key;

 textattr(LIGHTGRAY);
 31c:	87 e0       	ldi	r24, 0x07	; 7
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
 clrscr();
 324:	0e 94 b7 03 	call	0x76e	; 0x76e <clrscr>

 while (1) {
    _cputs("Debug line 1\r\n");
 328:	84 ec       	ldi	r24, 0xC4	; 196
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
   if (_kbhit()) {
 330:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_kbhit>
 334:	89 2b       	or	r24, r25
 336:	c1 f3       	breq	.-16     	; 0x328 <debugdemo+0x10>
      key = _getch();
 338:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
 33c:	8c 01       	movw	r16, r24
      _cputs("You have pressed key");
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
	  _putch(key);
 346:	80 2f       	mov	r24, r16
 348:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
      _cputs("\r\n");
 34c:	88 ee       	ldi	r24, 0xE8	; 232
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
      if (key == KB_ESC)
 354:	0b 31       	cpi	r16, 0x1B	; 27
 356:	11 05       	cpc	r17, r1
 358:	39 f7       	brne	.-50     	; 0x328 <debugdemo+0x10>
       return ;
   }
 }
}
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <main>:
"##                              "
"www.MicroVGA.com, www.secons.com";
#endif

void main()
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 int i,j;

//////////// tady je hlavni main

 MCU_Init();
 364:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MCU_Init>
 368:	c0 e0       	ldi	r28, 0x00	; 0
 36a:	d0 e0       	ldi	r29, 0x00	; 0

 item = 0;

 while (1) {
	
	 textbackground(BLUE);
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
	 clrscr();
 374:	0e 94 b7 03 	call	0x76e	; 0x76e <clrscr>
	 textcolor(BLACK);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
	 textbackground(CYAN);
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
	 _cputs("MicroVGA demo app");
 388:	8b ee       	ldi	r24, 0xEB	; 235
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
	 clreol();
 390:	0e 94 ad 03 	call	0x75a	; 0x75a <clreol>
	 textbackground(BLUE);
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
	 textcolor(GREEN);
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
	     }
	 }
#endif


	item = runmenu(5,5, mainmenu, item);
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	65 e0       	ldi	r22, 0x05	; 5
 3a8:	43 e7       	ldi	r20, 0x73	; 115
 3aa:	52 e0       	ldi	r21, 0x02	; 2
 3ac:	9e 01       	movw	r18, r28
 3ae:	0e 94 9b 04 	call	0x936	; 0x936 <runmenu>
 3b2:	ec 01       	movw	r28, r24
	switch (item) {
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	91 05       	cpc	r25, r1
 3b8:	11 f1       	breq	.+68     	; 0x3fe <main+0x9e>
 3ba:	85 30       	cpi	r24, 0x05	; 5
 3bc:	91 05       	cpc	r25, r1
 3be:	54 f4       	brge	.+20     	; 0x3d4 <main+0x74>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <main+0x92>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	91 05       	cpc	r25, r1
 3ca:	b4 f4       	brge	.+44     	; 0x3f8 <main+0x98>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	69 f6       	brne	.-102    	; 0x36c <main+0xc>
 3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <main+0x88>
 3d4:	86 30       	cpi	r24, 0x06	; 6
 3d6:	91 05       	cpc	r25, r1
 3d8:	c1 f0       	breq	.+48     	; 0x40a <main+0xaa>
 3da:	86 30       	cpi	r24, 0x06	; 6
 3dc:	91 05       	cpc	r25, r1
 3de:	94 f0       	brlt	.+36     	; 0x404 <main+0xa4>
 3e0:	87 30       	cpi	r24, 0x07	; 7
 3e2:	91 05       	cpc	r25, r1
 3e4:	19 f6       	brne	.-122    	; 0x36c <main+0xc>
 3e6:	14 c0       	rjmp	.+40     	; 0x410 <main+0xb0>
	  case 1:  memviewer(0); break;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 7d 01 	call	0x2fa	; 0x2fa <memviewer>
 3f0:	bd cf       	rjmp	.-134    	; 0x36c <main+0xc>
	  case 2:  debugdemo(); break;
 3f2:	0e 94 8c 01 	call	0x318	; 0x318 <debugdemo>
 3f6:	ba cf       	rjmp	.-140    	; 0x36c <main+0xc>
	  case 3:  speedtest(); break;
 3f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <speedtest>
 3fc:	b7 cf       	rjmp	.-146    	; 0x36c <main+0xc>
	  case 4:  submenutest(); break;
 3fe:	0e 94 5f 00 	call	0xbe	; 0xbe <submenutest>
 402:	b4 cf       	rjmp	.-152    	; 0x36c <main+0xc>
	  case 5:  cli(); break;
 404:	0e 94 a1 00 	call	0x142	; 0x142 <cli>
 408:	b1 cf       	rjmp	.-158    	; 0x36c <main+0xc>
	  case 6:  ascii_art(); break;
 40a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ascii_art>
 40e:	ae cf       	rjmp	.-164    	; 0x36c <main+0xc>
          case 7:  testCGetS(); break;
 410:	0e 94 f7 00 	call	0x1ee	; 0x1ee <testCGetS>
 414:	ab cf       	rjmp	.-170    	; 0x36c <main+0xc>

00000416 <drawmem>:
};

const static char hexchars[16] = "0123456789ABCDEF";

void drawmem(const unsigned char *mem)
{
 416:	bf 92       	push	r11
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	18 2f       	mov	r17, r24
 42a:	09 2f       	mov	r16, r25
  const unsigned char *mptr;
  int i,j;


 textbackground(BLUE);
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
 434:	21 2f       	mov	r18, r17
 436:	30 2f       	mov	r19, r16
 438:	c9 01       	movw	r24, r18
 43a:	7c 01       	movw	r14, r24
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	b9 2e       	mov	r11, r25
 440:	6f c0       	rjmp	.+222    	; 0x520 <drawmem+0x10a>
 442:	67 01       	movw	r12, r14
 for (i=0;i<23 && !_kbhit();i++) {
   mptr = &mem[i*16];
   gotoxy(1,i+2);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	6b 2d       	mov	r22, r11
 448:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
   textcolor(YELLOW);
 44c:	8b e0       	ldi	r24, 0x0B	; 11
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
 454:	0c e1       	ldi	r16, 0x1C	; 28
 456:	10 e0       	ldi	r17, 0x00	; 0
   j = 8;
   do {
     j--;
     _putch(hexchars[  (((int)mptr)>>(j*4)) &0xF] );
 458:	f7 01       	movw	r30, r14
 45a:	00 2e       	mov	r0, r16
 45c:	02 c0       	rjmp	.+4      	; 0x462 <drawmem+0x4c>
 45e:	f5 95       	asr	r31
 460:	e7 95       	ror	r30
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <drawmem+0x48>
 466:	ef 70       	andi	r30, 0x0F	; 15
 468:	f0 70       	andi	r31, 0x00	; 0
 46a:	e2 52       	subi	r30, 0x22	; 34
 46c:	fd 4f       	sbci	r31, 0xFD	; 253
 46e:	80 81       	ld	r24, Z
 470:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 474:	04 50       	subi	r16, 0x04	; 4
 476:	10 40       	sbci	r17, 0x00	; 0
   } while (j>0);
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	0c 3f       	cpi	r16, 0xFC	; 252
 47c:	18 07       	cpc	r17, r24
 47e:	61 f7       	brne	.-40     	; 0x458 <drawmem+0x42>
   _cputs(":  ");
 480:	8d ef       	ldi	r24, 0xFD	; 253
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_cputs>
   textcolor(WHITE);
 488:	8f e0       	ldi	r24, 0x0F	; 15
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
 490:	e7 01       	movw	r28, r14
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0

   for (j=0;j<16;j++) {
     _putch(hexchars[*mptr>>4]);
 496:	e8 81       	ld	r30, Y
 498:	e2 95       	swap	r30
 49a:	ef 70       	andi	r30, 0x0F	; 15
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	e2 52       	subi	r30, 0x22	; 34
 4a0:	fd 4f       	sbci	r31, 0xFD	; 253
 4a2:	80 81       	ld	r24, Z
 4a4:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
     _putch(hexchars[*mptr&0xF]);
 4a8:	e9 91       	ld	r30, Y+
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ef 70       	andi	r30, 0x0F	; 15
 4ae:	f0 70       	andi	r31, 0x00	; 0
 4b0:	e2 52       	subi	r30, 0x22	; 34
 4b2:	fd 4f       	sbci	r31, 0xFD	; 253
 4b4:	80 81       	ld	r24, Z
 4b6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
     mptr++;
     _putch(' ');
 4ba:	80 e2       	ldi	r24, 0x20	; 32
 4bc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
     if (j == 7) {
 4c0:	07 30       	cpi	r16, 0x07	; 7
 4c2:	11 05       	cpc	r17, r1
 4c4:	31 f4       	brne	.+12     	; 0x4d2 <drawmem+0xbc>
       _putch('-');
 4c6:	8d e2       	ldi	r24, 0x2D	; 45
 4c8:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
       _putch(' ');
 4cc:	80 e2       	ldi	r24, 0x20	; 32
 4ce:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
     _putch(hexchars[  (((int)mptr)>>(j*4)) &0xF] );
   } while (j>0);
   _cputs(":  ");
   textcolor(WHITE);

   for (j=0;j<16;j++) {
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	00 31       	cpi	r16, 0x10	; 16
 4d8:	11 05       	cpc	r17, r1
 4da:	e9 f6       	brne	.-70     	; 0x496 <drawmem+0x80>
       _putch('-');
       _putch(' ');
     }
   } 

   _putch(179);
 4dc:	83 eb       	ldi	r24, 0xB3	; 179
 4de:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
   _putch(' ');
 4e2:	80 e2       	ldi	r24, 0x20	; 32
 4e4:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 4e8:	00 e0       	ldi	r16, 0x00	; 0
 4ea:	10 e0       	ldi	r17, 0x00	; 0

   mptr = &mem[i*16];
   for (j=0;j<16;j++) {
     if (*mptr >= ' ')
 4ec:	f6 01       	movw	r30, r12
 4ee:	80 81       	ld	r24, Z
 4f0:	80 32       	cpi	r24, 0x20	; 32
 4f2:	08 f4       	brcc	.+2      	; 0x4f6 <drawmem+0xe0>
     _putch(*mptr);
      else _putch('.');
 4f4:	8e e2       	ldi	r24, 0x2E	; 46
 4f6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>

   _putch(179);
   _putch(' ');

   mptr = &mem[i*16];
   for (j=0;j<16;j++) {
 4fa:	0f 5f       	subi	r16, 0xFF	; 255
 4fc:	1f 4f       	sbci	r17, 0xFF	; 255
 4fe:	00 31       	cpi	r16, 0x10	; 16
 500:	11 05       	cpc	r17, r1
 502:	21 f0       	breq	.+8      	; 0x50c <drawmem+0xf6>
     if (*mptr >= ' ')
     _putch(*mptr);
      else _putch('.');
     mptr++;
 504:	08 94       	sec
 506:	c1 1c       	adc	r12, r1
 508:	d1 1c       	adc	r13, r1
 50a:	f0 cf       	rjmp	.-32     	; 0x4ec <drawmem+0xd6>
   } 

   clreol();   
 50c:	0e 94 ad 03 	call	0x75a	; 0x75a <clreol>
 510:	80 e1       	ldi	r24, 0x10	; 16
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	e8 0e       	add	r14, r24
 516:	f9 1e       	adc	r15, r25
 518:	b3 94       	inc	r11
  const unsigned char *mptr;
  int i,j;


 textbackground(BLUE);
 for (i=0;i<23 && !_kbhit();i++) {
 51a:	99 e1       	ldi	r25, 0x19	; 25
 51c:	b9 16       	cp	r11, r25
 51e:	29 f0       	breq	.+10     	; 0x52a <drawmem+0x114>
 520:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_kbhit>
 524:	89 2b       	or	r24, r25
 526:	09 f4       	brne	.+2      	; 0x52a <drawmem+0x114>
 528:	8c cf       	rjmp	.-232    	; 0x442 <drawmem+0x2c>
     mptr++;
   } 

   clreol();   
 }
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	bf 90       	pop	r11
 53c:	08 95       	ret

0000053e <_cgets>:
   while (*s != 0) 
    _putch(*s++);
}

char * _cgets(char *s)
{
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	8c 01       	movw	r16, r24
 54a:	ff 24       	eor	r15, r15
 54c:	2c c0       	rjmp	.+88     	; 0x5a6 <_cgets+0x68>
  
  len=0;

  while (s[0]>len)
  {
    ch=_getch();
 54e:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
 552:	ec 01       	movw	r28, r24
    
    if (ch==KB_ENTER)
 554:	8a 30       	cpi	r24, 0x0A	; 10
 556:	91 05       	cpc	r25, r1
 558:	51 f1       	breq	.+84     	; 0x5ae <_cgets+0x70>
      break; //enter hit, end of input

    if (ch==KB_ESC) {
 55a:	8b 31       	cpi	r24, 0x1B	; 27
 55c:	91 05       	cpc	r25, r1
 55e:	39 f4       	brne	.+14     	; 0x56e <_cgets+0x30>
      s[1]=0;
 560:	f8 01       	movw	r30, r16
 562:	11 82       	std	Z+1, r1	; 0x01
      s[2]=0;
 564:	98 01       	movw	r18, r16
 566:	2e 5f       	subi	r18, 0xFE	; 254
 568:	3f 4f       	sbci	r19, 0xFF	; 255
 56a:	12 82       	std	Z+2, r1	; 0x02
 56c:	28 c0       	rjmp	.+80     	; 0x5be <_cgets+0x80>
      return &s[2]; 
    }

    
    if (ch==KB_BACK)
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	91 05       	cpc	r25, r1
 572:	69 f4       	brne	.+26     	; 0x58e <_cgets+0x50>
    {
      
        if (len>0) 
 574:	ff 20       	and	r15, r15
 576:	b9 f0       	breq	.+46     	; 0x5a6 <_cgets+0x68>
        {
            len--;
 578:	fa 94       	dec	r15
            //delete char and go back (if some chars left)
            _putch(KB_BACK);
 57a:	88 e0       	ldi	r24, 0x08	; 8
 57c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
            _putch(' '); 
 580:	80 e2       	ldi	r24, 0x20	; 32
 582:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
            _putch(KB_BACK);
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <_cgets+0x68>
        }
         
         continue;
    }

    if (ch>0x80 || ch <' ') //skip functions keys
 58e:	80 97       	sbiw	r24, 0x20	; 32
 590:	81 36       	cpi	r24, 0x61	; 97
 592:	91 05       	cpc	r25, r1
 594:	40 f4       	brcc	.+16     	; 0x5a6 <_cgets+0x68>
        continue;
  
    _putch((char)0xff&ch); //print back to screen
 596:	8c 2f       	mov	r24, r28
 598:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
    s[len+2]=(char)0xff&ch;
 59c:	f8 01       	movw	r30, r16
 59e:	ef 0d       	add	r30, r15
 5a0:	f1 1d       	adc	r31, r1
 5a2:	c2 83       	std	Z+2, r28	; 0x02
    len++;
 5a4:	f3 94       	inc	r15
  char len;
  int ch;
  
  len=0;

  while (s[0]>len)
 5a6:	f8 01       	movw	r30, r16
 5a8:	80 81       	ld	r24, Z
 5aa:	f8 16       	cp	r15, r24
 5ac:	80 f2       	brcs	.-96     	; 0x54e <_cgets+0x10>
    _putch((char)0xff&ch); //print back to screen
    s[len+2]=(char)0xff&ch;
    len++;
  }
  
  s[1]=len;
 5ae:	f8 01       	movw	r30, r16
 5b0:	f1 82       	std	Z+1, r15	; 0x01
  s[len+2]=0;
 5b2:	ef 0d       	add	r30, r15
 5b4:	f1 1d       	adc	r31, r1
 5b6:	12 82       	std	Z+2, r1	; 0x02

  return &s[2]; 
 5b8:	98 01       	movw	r18, r16
 5ba:	2e 5f       	subi	r18, 0xFE	; 254
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	c9 01       	movw	r24, r18
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	08 95       	ret

000005cc <_cputs>:
  _putch('f');
}


void _cputs(const char *s)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <_cputs+0xe>
   while (*s != 0) 
    _putch(*s++);
 5d4:	21 96       	adiw	r28, 0x01	; 1
 5d6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}


void _cputs(const char *s)
{
   while (*s != 0) 
 5da:	88 81       	ld	r24, Y
 5dc:	88 23       	and	r24, r24
 5de:	d1 f7       	brne	.-12     	; 0x5d4 <_cputs+0x8>
    _putch(*s++);
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <gotoxy>:
  textcolor(attr&0xF);
  textbackground(attr>>4);
}

void gotoxy(char x, char y)
{
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
  if (x>MAX_X || y>MAX_Y)
 5ea:	81 35       	cpi	r24, 0x51	; 81
 5ec:	80 f5       	brcc	.+96     	; 0x64e <gotoxy+0x68>
 5ee:	6a 31       	cpi	r22, 0x1A	; 26
 5f0:	70 f5       	brcc	.+92     	; 0x64e <gotoxy+0x68>
    return;
  
  x--;
 5f2:	08 2f       	mov	r16, r24
 5f4:	01 50       	subi	r16, 0x01	; 1
  y--;
 5f6:	16 2f       	mov	r17, r22
 5f8:	11 50       	subi	r17, 0x01	; 1

  _putch(0x1B);
 5fa:	8b e1       	ldi	r24, 0x1B	; 27
 5fc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 600:	8b e5       	ldi	r24, 0x5B	; 91
 602:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch((y/10)+'0');
 606:	81 2f       	mov	r24, r17
 608:	6a e0       	ldi	r22, 0x0A	; 10
 60a:	0e 94 f6 05 	call	0xbec	; 0xbec <__udivmodqi4>
 60e:	80 5d       	subi	r24, 0xD0	; 208
 610:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch((y%10)+'0');
 614:	81 2f       	mov	r24, r17
 616:	6a e0       	ldi	r22, 0x0A	; 10
 618:	0e 94 f6 05 	call	0xbec	; 0xbec <__udivmodqi4>
 61c:	89 2f       	mov	r24, r25
 61e:	80 5d       	subi	r24, 0xD0	; 208
 620:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch(';');
 624:	8b e3       	ldi	r24, 0x3B	; 59
 626:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch((x/10)+'0');
 62a:	80 2f       	mov	r24, r16
 62c:	6a e0       	ldi	r22, 0x0A	; 10
 62e:	0e 94 f6 05 	call	0xbec	; 0xbec <__udivmodqi4>
 632:	80 5d       	subi	r24, 0xD0	; 208
 634:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch((x%10)+'0');
 638:	80 2f       	mov	r24, r16
 63a:	6a e0       	ldi	r22, 0x0A	; 10
 63c:	0e 94 f6 05 	call	0xbec	; 0xbec <__udivmodqi4>
 640:	89 2f       	mov	r24, r25
 642:	80 5d       	subi	r24, 0xD0	; 208
 644:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('f');
 648:	86 e6       	ldi	r24, 0x66	; 102
 64a:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	08 95       	ret

00000654 <textbackground>:
  _putch(((color&0x7)%10)+'0');
  _putch('m');
}

void textbackground(int color)
{
 654:	1f 93       	push	r17
 656:	18 2f       	mov	r17, r24
  _putch('\033');
 658:	8b e1       	ldi	r24, 0x1B	; 27
 65a:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 65e:	8b e5       	ldi	r24, 0x5B	; 91
 660:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  if (color & 0x8) 
 664:	13 ff       	sbrs	r17, 3
 666:	02 c0       	rjmp	.+4      	; 0x66c <textbackground+0x18>
	  _putch('5');
 668:	85 e3       	ldi	r24, 0x35	; 53
 66a:	01 c0       	rjmp	.+2      	; 0x66e <textbackground+0x1a>
  else _putch('6');
 66c:	86 e3       	ldi	r24, 0x36	; 54
 66e:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('m');
 672:	8d e6       	ldi	r24, 0x6D	; 109
 674:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>

  _putch('\033');
 678:	8b e1       	ldi	r24, 0x1B	; 27
 67a:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 67e:	8b e5       	ldi	r24, 0x5B	; 91
 680:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('4');
 684:	84 e3       	ldi	r24, 0x34	; 52
 686:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch((color&0x7)+'0');
 68a:	81 2f       	mov	r24, r17
 68c:	87 70       	andi	r24, 0x07	; 7
 68e:	80 5d       	subi	r24, 0xD0	; 208
 690:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('m');
 694:	8d e6       	ldi	r24, 0x6D	; 109
 696:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 69a:	1f 91       	pop	r17
 69c:	08 95       	ret

0000069e <textcolor>:
  _putch('5');
  _putch('l');
}

void textcolor(int color)
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	ec 01       	movw	r28, r24
  _putch('\033');
 6a4:	8b e1       	ldi	r24, 0x1B	; 27
 6a6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 6aa:	8b e5       	ldi	r24, 0x5B	; 91
 6ac:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  if (color & 0x8) 
 6b0:	c3 ff       	sbrs	r28, 3
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <textcolor+0x1a>
	  _putch('1');
 6b4:	81 e3       	ldi	r24, 0x31	; 49
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <textcolor+0x1c>
  else _putch('2');
 6b8:	82 e3       	ldi	r24, 0x32	; 50
 6ba:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('m');
 6be:	8d e6       	ldi	r24, 0x6D	; 109
 6c0:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>

  _putch('\033');
 6c4:	8b e1       	ldi	r24, 0x1B	; 27
 6c6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 6ca:	8b e5       	ldi	r24, 0x5B	; 91
 6cc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('3');
 6d0:	83 e3       	ldi	r24, 0x33	; 51
 6d2:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch(((color&0x7)%10)+'0');
 6d6:	ce 01       	movw	r24, r28
 6d8:	87 70       	andi	r24, 0x07	; 7
 6da:	90 70       	andi	r25, 0x00	; 0
 6dc:	6a e0       	ldi	r22, 0x0A	; 10
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divmodhi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('m');
 6ea:	8d e6       	ldi	r24, 0x6D	; 109
 6ec:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <textattr>:
  _putch((color&0x7)+'0');
  _putch('m');
}

void textattr(int attr)
{
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	8c 01       	movw	r16, r24
  textcolor(attr&0xF);
 6fc:	8f 70       	andi	r24, 0x0F	; 15
 6fe:	90 70       	andi	r25, 0x00	; 0
 700:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
  textbackground(attr>>4);
 704:	c8 01       	movw	r24, r16
 706:	24 e0       	ldi	r18, 0x04	; 4
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	2a 95       	dec	r18
 70e:	e1 f7       	brne	.-8      	; 0x708 <textattr+0x12>
 710:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
}
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	08 95       	ret

0000071a <cursoroff>:
  _putch('h');
}

void cursoroff(void)
{
  _putch('\033');
 71a:	8b e1       	ldi	r24, 0x1B	; 27
 71c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 720:	8b e5       	ldi	r24, 0x5B	; 91
 722:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('2');
 726:	82 e3       	ldi	r24, 0x32	; 50
 728:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('5');
 72c:	85 e3       	ldi	r24, 0x35	; 53
 72e:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('l');
 732:	8c e6       	ldi	r24, 0x6C	; 108
 734:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 738:	08 95       	ret

0000073a <cursoron>:
}


void cursoron(void)
{
  _putch('\033');
 73a:	8b e1       	ldi	r24, 0x1B	; 27
 73c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 740:	8b e5       	ldi	r24, 0x5B	; 91
 742:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('2');
 746:	82 e3       	ldi	r24, 0x32	; 50
 748:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('5');
 74c:	85 e3       	ldi	r24, 0x35	; 53
 74e:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('h');
 752:	88 e6       	ldi	r24, 0x68	; 104
 754:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 758:	08 95       	ret

0000075a <clreol>:
  _putch('J');
}

void clreol(void)
{
  _putch('\033');
 75a:	8b e1       	ldi	r24, 0x1B	; 27
 75c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 760:	8b e5       	ldi	r24, 0x5B	; 91
 762:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('K');
 766:	8b e4       	ldi	r24, 0x4B	; 75
 768:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 76c:	08 95       	ret

0000076e <clrscr>:
#include "../h/kbd.h"


void clrscr(void)
{
  _putch('\033');
 76e:	8b e1       	ldi	r24, 0x1B	; 27
 770:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('[');
 774:	8b e5       	ldi	r24, 0x5B	; 91
 776:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('2');
 77a:	82 e3       	ldi	r24, 0x32	; 50
 77c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch('J');
 780:	8a e4       	ldi	r24, 0x4A	; 74
 782:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
}
 786:	08 95       	ret

00000788 <drawframe>:
  }
 }
}

void drawframe(int x, int y, int width, int height, int color)
{
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	e8 2e       	mov	r14, r24
 7a2:	f6 2e       	mov	r15, r22
 7a4:	6a 01       	movw	r12, r20
 7a6:	59 01       	movw	r10, r18
 7a8:	c8 01       	movw	r24, r16
  int i,j;
  
  textattr(color);
 7aa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
  gotoxy(x,y);
 7ae:	8e 2d       	mov	r24, r14
 7b0:	6f 2d       	mov	r22, r15
 7b2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
  
  _putch(ACS_ULCORNER);
 7b6:	8a ed       	ldi	r24, 0xDA	; 218
 7b8:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 7bc:	00 e0       	ldi	r16, 0x00	; 0
 7be:	10 e0       	ldi	r17, 0x00	; 0
  for (i=0;i<width+2;i++) 
 7c0:	46 01       	movw	r8, r12
 7c2:	08 94       	sec
 7c4:	81 1c       	adc	r8, r1
 7c6:	91 1c       	adc	r9, r1
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <drawframe+0x4c>
	_putch(ACS_HLINE);
 7ca:	84 ec       	ldi	r24, 0xC4	; 196
 7cc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  
  textattr(color);
  gotoxy(x,y);
  
  _putch(ACS_ULCORNER);
  for (i=0;i<width+2;i++) 
 7d0:	0f 5f       	subi	r16, 0xFF	; 255
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	80 16       	cp	r8, r16
 7d6:	91 06       	cpc	r9, r17
 7d8:	c4 f7       	brge	.-16     	; 0x7ca <drawframe+0x42>
	_putch(ACS_HLINE);
  _putch(ACS_URCORNER);
 7da:	8f eb       	ldi	r24, 0xBF	; 191
 7dc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 7e0:	c0 e0       	ldi	r28, 0x00	; 0
 7e2:	d0 e0       	ldi	r29, 0x00	; 0
 7e4:	f3 94       	inc	r15
 7e6:	1d c0       	rjmp	.+58     	; 0x822 <drawframe+0x9a>
  
  for (i = 0;i<height;i++) {
	  gotoxy(x,y+i+1);
 7e8:	6f 2d       	mov	r22, r15
 7ea:	6c 0f       	add	r22, r28
 7ec:	8e 2d       	mov	r24, r14
 7ee:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
	  _putch(ACS_VLINE);
 7f2:	83 eb       	ldi	r24, 0xB3	; 179
 7f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(' ');
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 7fe:	00 e0       	ldi	r16, 0x00	; 0
 800:	10 e0       	ldi	r17, 0x00	; 0
 802:	05 c0       	rjmp	.+10     	; 0x80e <drawframe+0x86>
   
   for (j=0;j<width;j++) {
	    _putch(' ');
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  for (i = 0;i<height;i++) {
	  gotoxy(x,y+i+1);
	  _putch(ACS_VLINE);
	  _putch(' ');
   
   for (j=0;j<width;j++) {
 80a:	0f 5f       	subi	r16, 0xFF	; 255
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	0c 15       	cp	r16, r12
 810:	1d 05       	cpc	r17, r13
 812:	c4 f3       	brlt	.-16     	; 0x804 <drawframe+0x7c>
	    _putch(' ');
      }
          _putch(' ');
 814:	80 e2       	ldi	r24, 0x20	; 32
 816:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(ACS_VLINE);
 81a:	83 eb       	ldi	r24, 0xB3	; 179
 81c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch(ACS_ULCORNER);
  for (i=0;i<width+2;i++) 
	_putch(ACS_HLINE);
  _putch(ACS_URCORNER);
  
  for (i = 0;i<height;i++) {
 820:	21 96       	adiw	r28, 0x01	; 1
 822:	ca 15       	cp	r28, r10
 824:	db 05       	cpc	r29, r11
 826:	04 f3       	brlt	.-64     	; 0x7e8 <drawframe+0x60>
      }
          _putch(' ');
	  _putch(ACS_VLINE);
  }
 
  gotoxy(x,y+height+1);
 828:	fa 0c       	add	r15, r10
 82a:	8e 2d       	mov	r24, r14
 82c:	6f 2d       	mov	r22, r15
 82e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
  _putch(ACS_LLCORNER);
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 838:	00 e0       	ldi	r16, 0x00	; 0
 83a:	10 e0       	ldi	r17, 0x00	; 0
 83c:	05 c0       	rjmp	.+10     	; 0x848 <drawframe+0xc0>
  for (i=0;i<width+2;i++) 
	_putch(ACS_HLINE);
 83e:	84 ec       	ldi	r24, 0xC4	; 196
 840:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(ACS_VLINE);
  }
 
  gotoxy(x,y+height+1);
  _putch(ACS_LLCORNER);
  for (i=0;i<width+2;i++) 
 844:	0f 5f       	subi	r16, 0xFF	; 255
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	80 16       	cp	r8, r16
 84a:	91 06       	cpc	r9, r17
 84c:	c4 f7       	brge	.-16     	; 0x83e <drawframe+0xb6>
	_putch(ACS_HLINE);
  _putch(ACS_LRCORNER);
 84e:	89 ed       	ldi	r24, 0xD9	; 217
 850:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	ff 90       	pop	r15
 85e:	ef 90       	pop	r14
 860:	df 90       	pop	r13
 862:	cf 90       	pop	r12
 864:	bf 90       	pop	r11
 866:	af 90       	pop	r10
 868:	9f 90       	pop	r9
 86a:	8f 90       	pop	r8
 86c:	08 95       	ret

0000086e <drawfkeys>:
}



void drawfkeys(const char *fkeys[])
{
 86e:	cf 92       	push	r12
 870:	df 92       	push	r13
 872:	ef 92       	push	r14
 874:	ff 92       	push	r15
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	18 2f       	mov	r17, r24
 880:	09 2f       	mov	r16, r25
 const char *s;
 int i, j;

 gotoxy(1,25);
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	69 e1       	ldi	r22, 0x19	; 25
 886:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
 88a:	21 2f       	mov	r18, r17
 88c:	30 2f       	mov	r19, r16
 88e:	c9 01       	movw	r24, r18
 890:	6c 01       	movw	r12, r24
 892:	ee 24       	eor	r14, r14
 894:	ff 24       	eor	r15, r15
 for (i=0;i<10;i++) {
   textcolor(WHITE);
 896:	8f e0       	ldi	r24, 0x0F	; 15
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
   textbackground(BLACK);
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>
   if (i!= 0)
 8a6:	e1 14       	cp	r14, r1
 8a8:	f1 04       	cpc	r15, r1
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <drawfkeys+0x56>
    _putch(' ');
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
   if (i== 9) {
 8b2:	89 e0       	ldi	r24, 0x09	; 9
 8b4:	e8 16       	cp	r14, r24
 8b6:	f1 04       	cpc	r15, r1
 8b8:	29 f4       	brne	.+10     	; 0x8c4 <drawfkeys+0x56>
    _putch('1');
 8ba:	81 e3       	ldi	r24, 0x31	; 49
 8bc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
    _putch('0');
 8c0:	80 e3       	ldi	r24, 0x30	; 48
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <drawfkeys+0x62>
   } else
   _putch((i%10)+'1');
 8c4:	c7 01       	movw	r24, r14
 8c6:	6a e0       	ldi	r22, 0x0A	; 10
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divmodhi4>
 8ce:	8f 5c       	subi	r24, 0xCF	; 207
 8d0:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
   textcolor(BLACK);
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 4f 03 	call	0x69e	; 0x69e <textcolor>
   textbackground(CYAN);
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 2a 03 	call	0x654	; 0x654 <textbackground>

  s = fkeys[i] ? fkeys[i] : 0;
 8e4:	f6 01       	movw	r30, r12
 8e6:	c0 81       	ld	r28, Z
 8e8:	d1 81       	ldd	r29, Z+1	; 0x01
 8ea:	00 e0       	ldi	r16, 0x00	; 0
 8ec:	10 e0       	ldi	r17, 0x00	; 0
  for (j=0;j<6;j++) {
   if (s && *s)
 8ee:	20 97       	sbiw	r28, 0x00	; 0
 8f0:	29 f0       	breq	.+10     	; 0x8fc <drawfkeys+0x8e>
 8f2:	88 81       	ld	r24, Y
 8f4:	88 23       	and	r24, r24
 8f6:	11 f0       	breq	.+4      	; 0x8fc <drawfkeys+0x8e>
    _putch(*s++);
 8f8:	21 96       	adiw	r28, 0x01	; 1
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <drawfkeys+0x90>
   else _putch(' ');
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
   _putch((i%10)+'1');
   textcolor(BLACK);
   textbackground(CYAN);

  s = fkeys[i] ? fkeys[i] : 0;
  for (j=0;j<6;j++) {
 902:	0f 5f       	subi	r16, 0xFF	; 255
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	06 30       	cpi	r16, 0x06	; 6
 908:	11 05       	cpc	r17, r1
 90a:	89 f7       	brne	.-30     	; 0x8ee <drawfkeys+0x80>
{
 const char *s;
 int i, j;

 gotoxy(1,25);
 for (i=0;i<10;i++) {
 90c:	08 94       	sec
 90e:	e1 1c       	adc	r14, r1
 910:	f1 1c       	adc	r15, r1
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	c8 0e       	add	r12, r24
 918:	d9 1e       	adc	r13, r25
 91a:	9a e0       	ldi	r25, 0x0A	; 10
 91c:	e9 16       	cp	r14, r25
 91e:	f1 04       	cpc	r15, r1
 920:	09 f0       	breq	.+2      	; 0x924 <drawfkeys+0xb6>
 922:	b9 cf       	rjmp	.-142    	; 0x896 <drawfkeys+0x28>
   if (s && *s)
    _putch(*s++);
   else _putch(' ');
  }
 }
}
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	df 90       	pop	r13
 932:	cf 90       	pop	r12
 934:	08 95       	ret

00000936 <runmenu>:
#include "../h/ui.h"
#include "../h/kbd.h"


int runmenu(char x, char y, const char *menu[], int defaultitem)
{
 936:	2f 92       	push	r2
 938:	3f 92       	push	r3
 93a:	4f 92       	push	r4
 93c:	5f 92       	push	r5
 93e:	6f 92       	push	r6
 940:	7f 92       	push	r7
 942:	8f 92       	push	r8
 944:	9f 92       	push	r9
 946:	af 92       	push	r10
 948:	bf 92       	push	r11
 94a:	cf 92       	push	r12
 94c:	df 92       	push	r13
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	29 97       	sbiw	r28, 0x09	; 9
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	f8 94       	cli
 964:	de bf       	out	0x3e, r29	; 62
 966:	0f be       	out	0x3f, r0	; 63
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	68 2e       	mov	r6, r24
 96c:	69 83       	std	Y+1, r22	; 0x01
 96e:	4a 83       	std	Y+2, r20	; 0x02
 970:	5b 83       	std	Y+3, r21	; 0x03
 972:	79 01       	movw	r14, r18
  int key, i,j, itemno;
  int nitems, width;
  char *s;

  itemno = defaultitem-1;
 974:	08 94       	sec
 976:	e1 08       	sbc	r14, r1
 978:	f1 08       	sbc	r15, r1
 97a:	da 01       	movw	r26, r20
 97c:	88 24       	eor	r8, r8
 97e:	99 24       	eor	r9, r9
 980:	4a e0       	ldi	r20, 0x0A	; 10
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	10 c0       	rjmp	.+32     	; 0x9a6 <runmenu+0x70>
  width = 20;

  width = 10;
  nitems = 0;
  while (menu[nitems] != 0) {
    for (j=0;menu[nitems][j];j++);
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	fb 01       	movw	r30, r22
 98c:	e2 0f       	add	r30, r18
 98e:	f3 1f       	adc	r31, r19
 990:	80 81       	ld	r24, Z
 992:	88 23       	and	r24, r24
 994:	c1 f7       	brne	.-16     	; 0x986 <runmenu+0x50>
    if (j>width)
 996:	42 17       	cp	r20, r18
 998:	53 07       	cpc	r21, r19
 99a:	0c f4       	brge	.+2      	; 0x99e <runmenu+0x68>
 99c:	a9 01       	movw	r20, r18
     width = j;
    nitems++;
 99e:	08 94       	sec
 9a0:	81 1c       	adc	r8, r1
 9a2:	91 1c       	adc	r9, r1
 9a4:	12 96       	adiw	r26, 0x02	; 2
  itemno = defaultitem-1;
  width = 20;

  width = 10;
  nitems = 0;
  while (menu[nitems] != 0) {
 9a6:	6d 91       	ld	r22, X+
 9a8:	7c 91       	ld	r23, X
 9aa:	11 97       	sbiw	r26, 0x01	; 1
 9ac:	61 15       	cp	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <runmenu+0x82>
 9b2:	20 e0       	ldi	r18, 0x00	; 0
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	e9 cf       	rjmp	.-46     	; 0x98a <runmenu+0x54>
    for (j=0;menu[nitems][j];j++);
    if (j>width)
     width = j;
    nitems++;
  }
  width+=2;
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	28 2e       	mov	r2, r24
 9bc:	31 2c       	mov	r3, r1
 9be:	24 0e       	add	r2, r20
 9c0:	35 1e       	adc	r3, r21

  if (itemno < 0 || itemno > nitems)
 9c2:	f7 fc       	sbrc	r15, 7
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <runmenu+0x96>
 9c6:	8e 14       	cp	r8, r14
 9c8:	9f 04       	cpc	r9, r15
 9ca:	14 f4       	brge	.+4      	; 0x9d0 <runmenu+0x9a>
 9cc:	ee 24       	eor	r14, r14
 9ce:	ff 24       	eor	r15, r15

  cursoroff();
  textattr(CYAN<<4 | BLACK);
  gotoxy(x,y);
  _putch(ACS_ULCORNER);
  for (i=0;i<width+2;i++) 
 9d0:	21 01       	movw	r4, r2
 9d2:	08 94       	sec
 9d4:	41 1c       	adc	r4, r1
 9d6:	51 1c       	adc	r5, r1
	_putch(ACS_HLINE);
  _putch(ACS_URCORNER);
 9d8:	29 81       	ldd	r18, Y+1	; 0x01
 9da:	2f 5f       	subi	r18, 0xFF	; 255
 9dc:	2c 83       	std	Y+4, r18	; 0x04
       textattr(CYAN<<4 | BLACK);
	  _putch(' ');
	  _putch(ACS_VLINE);
  }

  gotoxy(x,y+nitems+1);
 9de:	28 0d       	add	r18, r8
 9e0:	2d 83       	std	Y+5, r18	; 0x05
  while (!_kbhit()) ;
  
   if (_kbhit()) {
     key = _getch();
     switch(key) {
      case KB_UP: if (itemno>0) itemno--;  else itemno = nitems-1; break;
 9e2:	c4 01       	movw	r24, r8
 9e4:	01 97       	sbiw	r24, 0x01	; 1
 9e6:	9f 83       	std	Y+7, r25	; 0x07
 9e8:	8e 83       	std	Y+6, r24	; 0x06
    itemno = 0;

  while (1) {


  cursoroff();
 9ea:	0e 94 8d 03 	call	0x71a	; 0x71a <cursoroff>
  textattr(CYAN<<4 | BLACK);
 9ee:	80 e6       	ldi	r24, 0x60	; 96
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
  gotoxy(x,y);
 9f6:	86 2d       	mov	r24, r6
 9f8:	69 81       	ldd	r22, Y+1	; 0x01
 9fa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
  _putch(ACS_ULCORNER);
 9fe:	8a ed       	ldi	r24, 0xDA	; 218
 a00:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 a04:	00 e0       	ldi	r16, 0x00	; 0
 a06:	10 e0       	ldi	r17, 0x00	; 0
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <runmenu+0xde>
  for (i=0;i<width+2;i++) 
	_putch(ACS_HLINE);
 a0a:	84 ec       	ldi	r24, 0xC4	; 196
 a0c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>

  cursoroff();
  textattr(CYAN<<4 | BLACK);
  gotoxy(x,y);
  _putch(ACS_ULCORNER);
  for (i=0;i<width+2;i++) 
 a10:	0f 5f       	subi	r16, 0xFF	; 255
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	40 16       	cp	r4, r16
 a16:	51 06       	cpc	r5, r17
 a18:	c4 f7       	brge	.-16     	; 0xa0a <runmenu+0xd4>
	_putch(ACS_HLINE);
  _putch(ACS_URCORNER);
 a1a:	8f eb       	ldi	r24, 0xBF	; 191
 a1c:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 a20:	8a 81       	ldd	r24, Y+2	; 0x02
 a22:	9b 81       	ldd	r25, Y+3	; 0x03
 a24:	9c 01       	movw	r18, r24
 a26:	59 01       	movw	r10, r18
 a28:	7c 80       	ldd	r7, Y+4	; 0x04
 a2a:	cc 24       	eor	r12, r12
 a2c:	dd 24       	eor	r13, r13
 a2e:	45 c0       	rjmp	.+138    	; 0xaba <runmenu+0x184>

  for (i = 0;i<nitems;i++) {
	  gotoxy(x,y+i+1);
 a30:	86 2d       	mov	r24, r6
 a32:	67 2d       	mov	r22, r7
 a34:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
	  _putch(ACS_VLINE);
 a38:	83 eb       	ldi	r24, 0xB3	; 179
 a3a:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(' ');
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
      if (i == itemno)
 a44:	ce 14       	cp	r12, r14
 a46:	df 04       	cpc	r13, r15
 a48:	21 f4       	brne	.+8      	; 0xa52 <runmenu+0x11c>
        textattr(YELLOW);
 a4a:	8b e0       	ldi	r24, 0x0B	; 11
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
 a52:	00 e0       	ldi	r16, 0x00	; 0
 a54:	10 e0       	ldi	r17, 0x00	; 0
 a56:	19 86       	std	Y+9, r1	; 0x09
 a58:	18 86       	std	Y+8, r1	; 0x08
 a5a:	1a c0       	rjmp	.+52     	; 0xa90 <runmenu+0x15a>
      s = 0;
	  for (j=0;j<width;j++) {
        if (s && *s)
 a5c:	e8 85       	ldd	r30, Y+8	; 0x08
 a5e:	f9 85       	ldd	r31, Y+9	; 0x09
 a60:	30 97       	sbiw	r30, 0x00	; 0
 a62:	39 f0       	breq	.+14     	; 0xa72 <runmenu+0x13c>
 a64:	80 81       	ld	r24, Z
 a66:	88 23       	and	r24, r24
 a68:	21 f0       	breq	.+8      	; 0xa72 <runmenu+0x13c>
          _putch(*s++);
 a6a:	31 96       	adiw	r30, 0x01	; 1
 a6c:	f9 87       	std	Y+9, r31	; 0x09
 a6e:	e8 87       	std	Y+8, r30	; 0x08
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <runmenu+0x13e>
	    else _putch(' ');
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
        if (s == 0)
 a78:	28 85       	ldd	r18, Y+8	; 0x08
 a7a:	39 85       	ldd	r19, Y+9	; 0x09
 a7c:	23 2b       	or	r18, r19
 a7e:	31 f4       	brne	.+12     	; 0xa8c <runmenu+0x156>
          s = (char *)menu[i];
 a80:	f5 01       	movw	r30, r10
 a82:	01 90       	ld	r0, Z+
 a84:	f0 81       	ld	r31, Z
 a86:	e0 2d       	mov	r30, r0
 a88:	f9 87       	std	Y+9, r31	; 0x09
 a8a:	e8 87       	std	Y+8, r30	; 0x08
	  _putch(ACS_VLINE);
	  _putch(' ');
      if (i == itemno)
        textattr(YELLOW);
      s = 0;
	  for (j=0;j<width;j++) {
 a8c:	0f 5f       	subi	r16, 0xFF	; 255
 a8e:	1f 4f       	sbci	r17, 0xFF	; 255
 a90:	02 15       	cp	r16, r2
 a92:	13 05       	cpc	r17, r3
 a94:	1c f3       	brlt	.-58     	; 0xa5c <runmenu+0x126>
          _putch(*s++);
	    else _putch(' ');
        if (s == 0)
          s = (char *)menu[i];
      }
       textattr(CYAN<<4 | BLACK);
 a96:	80 e6       	ldi	r24, 0x60	; 96
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <textattr>
	  _putch(' ');
 a9e:	80 e2       	ldi	r24, 0x20	; 32
 aa0:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(ACS_VLINE);
 aa4:	83 eb       	ldi	r24, 0xB3	; 179
 aa6:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
  _putch(ACS_ULCORNER);
  for (i=0;i<width+2;i++) 
	_putch(ACS_HLINE);
  _putch(ACS_URCORNER);

  for (i = 0;i<nitems;i++) {
 aaa:	08 94       	sec
 aac:	c1 1c       	adc	r12, r1
 aae:	d1 1c       	adc	r13, r1
 ab0:	22 e0       	ldi	r18, 0x02	; 2
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	a2 0e       	add	r10, r18
 ab6:	b3 1e       	adc	r11, r19
 ab8:	73 94       	inc	r7
 aba:	c8 14       	cp	r12, r8
 abc:	d9 04       	cpc	r13, r9
 abe:	0c f4       	brge	.+2      	; 0xac2 <runmenu+0x18c>
 ac0:	b7 cf       	rjmp	.-146    	; 0xa30 <runmenu+0xfa>
       textattr(CYAN<<4 | BLACK);
	  _putch(' ');
	  _putch(ACS_VLINE);
  }

  gotoxy(x,y+nitems+1);
 ac2:	86 2d       	mov	r24, r6
 ac4:	6d 81       	ldd	r22, Y+5	; 0x05
 ac6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <gotoxy>
  _putch(ACS_LLCORNER);
 aca:	80 ec       	ldi	r24, 0xC0	; 192
 acc:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
 ad0:	00 e0       	ldi	r16, 0x00	; 0
 ad2:	10 e0       	ldi	r17, 0x00	; 0
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <runmenu+0x1aa>
  for (i=0;i<width+2;i++) 
	_putch(ACS_HLINE);
 ad6:	84 ec       	ldi	r24, 0xC4	; 196
 ad8:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>
	  _putch(ACS_VLINE);
  }

  gotoxy(x,y+nitems+1);
  _putch(ACS_LLCORNER);
  for (i=0;i<width+2;i++) 
 adc:	0f 5f       	subi	r16, 0xFF	; 255
 ade:	1f 4f       	sbci	r17, 0xFF	; 255
 ae0:	40 16       	cp	r4, r16
 ae2:	51 06       	cpc	r5, r17
 ae4:	c4 f7       	brge	.-16     	; 0xad6 <runmenu+0x1a0>
	_putch(ACS_HLINE);
  _putch(ACS_LRCORNER);
 ae6:	89 ed       	ldi	r24, 0xD9	; 217
 ae8:	0e 94 c9 05 	call	0xb92	; 0xb92 <_putch>

  
  while (!_kbhit()) ;
 aec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_kbhit>
 af0:	89 2b       	or	r24, r25
 af2:	e1 f3       	breq	.-8      	; 0xaec <runmenu+0x1b6>
  
   if (_kbhit()) {
 af4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_kbhit>
 af8:	89 2b       	or	r24, r25
 afa:	09 f4       	brne	.+2      	; 0xafe <runmenu+0x1c8>
 afc:	76 cf       	rjmp	.-276    	; 0x9ea <runmenu+0xb4>
     key = _getch();
 afe:	0e 94 d2 05 	call	0xba4	; 0xba4 <_getch>
     switch(key) {
 b02:	8b 31       	cpi	r24, 0x1B	; 27
 b04:	91 05       	cpc	r25, r1
 b06:	09 f1       	breq	.+66     	; 0xb4a <runmenu+0x214>
 b08:	8c 31       	cpi	r24, 0x1C	; 28
 b0a:	91 05       	cpc	r25, r1
 b0c:	24 f4       	brge	.+8      	; 0xb16 <runmenu+0x1e0>
 b0e:	0a 97       	sbiw	r24, 0x0a	; 10
 b10:	09 f0       	breq	.+2      	; 0xb14 <runmenu+0x1de>
 b12:	6b cf       	rjmp	.-298    	; 0x9ea <runmenu+0xb4>
 b14:	1f c0       	rjmp	.+62     	; 0xb54 <runmenu+0x21e>
 b16:	31 e0       	ldi	r19, 0x01	; 1
 b18:	88 34       	cpi	r24, 0x48	; 72
 b1a:	93 07       	cpc	r25, r19
 b1c:	29 f0       	breq	.+10     	; 0xb28 <runmenu+0x1f2>
 b1e:	80 55       	subi	r24, 0x50	; 80
 b20:	91 40       	sbci	r25, 0x01	; 1
 b22:	09 f0       	breq	.+2      	; 0xb26 <runmenu+0x1f0>
 b24:	62 cf       	rjmp	.-316    	; 0x9ea <runmenu+0xb4>
 b26:	0a c0       	rjmp	.+20     	; 0xb3c <runmenu+0x206>
      case KB_UP: if (itemno>0) itemno--;  else itemno = nitems-1; break;
 b28:	1e 14       	cp	r1, r14
 b2a:	1f 04       	cpc	r1, r15
 b2c:	24 f4       	brge	.+8      	; 0xb36 <runmenu+0x200>
 b2e:	08 94       	sec
 b30:	e1 08       	sbc	r14, r1
 b32:	f1 08       	sbc	r15, r1
 b34:	5a cf       	rjmp	.-332    	; 0x9ea <runmenu+0xb4>
 b36:	ee 80       	ldd	r14, Y+6	; 0x06
 b38:	ff 80       	ldd	r15, Y+7	; 0x07
 b3a:	57 cf       	rjmp	.-338    	; 0x9ea <runmenu+0xb4>
      case KB_DOWN: itemno++; itemno %= nitems; break;
 b3c:	c7 01       	movw	r24, r14
 b3e:	01 96       	adiw	r24, 0x01	; 1
 b40:	b4 01       	movw	r22, r8
 b42:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divmodhi4>
 b46:	7c 01       	movw	r14, r24
 b48:	50 cf       	rjmp	.-352    	; 0x9ea <runmenu+0xb4>
      case KB_ESC: cursoron(); return 0;
 b4a:	0e 94 9d 03 	call	0x73a	; 0x73a <cursoron>
 b4e:	20 e0       	ldi	r18, 0x00	; 0
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <runmenu+0x228>
      case KB_ENTER: cursoron(); return itemno+1;
 b54:	0e 94 9d 03 	call	0x73a	; 0x73a <cursoron>
 b58:	97 01       	movw	r18, r14
 b5a:	2f 5f       	subi	r18, 0xFF	; 255
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     } 
   } 
  }
}
 b5e:	c9 01       	movw	r24, r18
 b60:	29 96       	adiw	r28, 0x09	; 9
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	f8 94       	cli
 b66:	de bf       	out	0x3e, r29	; 62
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	cd bf       	out	0x3d, r28	; 61
 b6c:	cf 91       	pop	r28
 b6e:	df 91       	pop	r29
 b70:	1f 91       	pop	r17
 b72:	0f 91       	pop	r16
 b74:	ff 90       	pop	r15
 b76:	ef 90       	pop	r14
 b78:	df 90       	pop	r13
 b7a:	cf 90       	pop	r12
 b7c:	bf 90       	pop	r11
 b7e:	af 90       	pop	r10
 b80:	9f 90       	pop	r9
 b82:	8f 90       	pop	r8
 b84:	7f 90       	pop	r7
 b86:	6f 90       	pop	r6
 b88:	5f 90       	pop	r5
 b8a:	4f 90       	pop	r4
 b8c:	3f 90       	pop	r3
 b8e:	2f 90       	pop	r2
 b90:	08 95       	ret

00000b92 <_putch>:


void _putch (char ch)
{

	while(PINB & (1<<PORT7)); //handshaking
 b92:	b7 99       	sbic	0x16, 7	; 22
 b94:	fe cf       	rjmp	.-4      	; 0xb92 <_putch>
	UDR = ch;    // send character
	while(!(USR & (1<<TXC))); //wait for char to be send

	USR &= ~(1<<TXC || 1<<UDRE);
#else //2 UART MCU
	while(!(UCSR0A & (1<<UDRE0))); //transmit buffer is ready to receivce data
 b96:	5d 9b       	sbis	0x0b, 5	; 11
 b98:	fe cf       	rjmp	.-4      	; 0xb96 <_putch+0x4>
	
	UDR0 = ch;    // send character
 b9a:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSR0A & (1<<TXC0))); //wait for char to be send
 b9c:	5e 9b       	sbis	0x0b, 6	; 11
 b9e:	fe cf       	rjmp	.-4      	; 0xb9c <_putch+0xa>

	UCSR0A &= ~(1<<TXC0 || 1<<UDRE0);
 ba0:	58 98       	cbi	0x0b, 0	; 11

#endif
	
}
 ba2:	08 95       	ret

00000ba4 <_getch>:
		while (!_kbhit()); /* Wait for incomming data */
		ch=UDR;
		ch = 0x100 | ch;
	}
#else
	while (!_kbhit()); /* Wait for incomming data */
 ba4:	5f 9b       	sbis	0x0b, 7	; 11
 ba6:	fe cf       	rjmp	.-4      	; 0xba4 <_getch>
	
	ch=UDR0; //read uart
 ba8:	8c b1       	in	r24, 0x0c	; 12
 baa:	28 2f       	mov	r18, r24
 bac:	30 e0       	ldi	r19, 0x00	; 0

	if (ch==0)
 bae:	21 15       	cp	r18, r1
 bb0:	31 05       	cpc	r19, r1
 bb2:	31 f4       	brne	.+12     	; 0xbc0 <_getch+0x1c>
	{
		while (!_kbhit()); /* Wait for incomming data */
 bb4:	5f 9b       	sbis	0x0b, 7	; 11
 bb6:	fe cf       	rjmp	.-4      	; 0xbb4 <_getch+0x10>
		ch=UDR0;
 bb8:	8c b1       	in	r24, 0x0c	; 12
 bba:	28 2f       	mov	r18, r24
 bbc:	30 e0       	ldi	r19, 0x00	; 0
		ch = 0x100 | ch;
 bbe:	31 60       	ori	r19, 0x01	; 1
	}
#endif

	return ch;
}
 bc0:	c9 01       	movw	r24, r18
 bc2:	08 95       	ret

00000bc4 <_kbhit>:
int state;

#ifdef USR
	state = (USR & (1<<7));
#else
	state = (UCSR0A & (1<<7));
 bc4:	2b b1       	in	r18, 0x0b	; 11
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	20 78       	andi	r18, 0x80	; 128
 bca:	30 70       	andi	r19, 0x00	; 0
#endif
	return state;
}
 bcc:	c9 01       	movw	r24, r18
 bce:	08 95       	ret

00000bd0 <MCU_Init>:

void MCU_Init(void)
{

   DDRB &= ~(1<<DDB7); //Handshaking: set port PB7 direction (input)
 bd0:	bf 98       	cbi	0x17, 7	; 23
   PORTB &= ~(1<<PB7);
 bd2:	c7 98       	cbi	0x18, 7	; 24
	//set uart speed
   UBRR = ((FOSC/16)/BAUD-1);
   // Enable the receiver and the transmitter
   UCR = (1<<RXEN) | (1<<TXEN);
#else
   UBRR0H = (((FOSC/16)/BAUD-1)>>8);  // The high byte, UBRR0H
 bd4:	10 92 90 00 	sts	0x0090, r1
   UBRR0L = ((FOSC/16)/BAUD-1);       // The low byte, UBRR0L
 bd8:	19 b8       	out	0x09, r1	; 9
	
   // Frame format (8 data bits, 1 stop bit, no parity)
   UCSR0C = UCSR0C | (1<<UCSZ02) | (1<<UCSZ01) | (1<<UCSZ00);
 bda:	e5 e9       	ldi	r30, 0x95	; 149
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	86 60       	ori	r24, 0x06	; 6
 be2:	80 83       	st	Z, r24
	
	// Enable the receiver and the transmitter
   UCSR0B = UCSR0B | (1<<RXEN0) | (1<<TXEN0); 	
 be4:	8a b1       	in	r24, 0x0a	; 10
 be6:	88 61       	ori	r24, 0x18	; 24
 be8:	8a b9       	out	0x0a, r24	; 10
#endif

}
 bea:	08 95       	ret

00000bec <__udivmodqi4>:
 bec:	99 1b       	sub	r25, r25
 bee:	79 e0       	ldi	r23, 0x09	; 9
 bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__udivmodqi4_ep>

00000bf2 <__udivmodqi4_loop>:
 bf2:	99 1f       	adc	r25, r25
 bf4:	96 17       	cp	r25, r22
 bf6:	08 f0       	brcs	.+2      	; 0xbfa <__udivmodqi4_ep>
 bf8:	96 1b       	sub	r25, r22

00000bfa <__udivmodqi4_ep>:
 bfa:	88 1f       	adc	r24, r24
 bfc:	7a 95       	dec	r23
 bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__udivmodqi4_loop>
 c00:	80 95       	com	r24
 c02:	08 95       	ret

00000c04 <__udivmodhi4>:
 c04:	aa 1b       	sub	r26, r26
 c06:	bb 1b       	sub	r27, r27
 c08:	51 e1       	ldi	r21, 0x11	; 17
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <__udivmodhi4_ep>

00000c0c <__udivmodhi4_loop>:
 c0c:	aa 1f       	adc	r26, r26
 c0e:	bb 1f       	adc	r27, r27
 c10:	a6 17       	cp	r26, r22
 c12:	b7 07       	cpc	r27, r23
 c14:	10 f0       	brcs	.+4      	; 0xc1a <__udivmodhi4_ep>
 c16:	a6 1b       	sub	r26, r22
 c18:	b7 0b       	sbc	r27, r23

00000c1a <__udivmodhi4_ep>:
 c1a:	88 1f       	adc	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	5a 95       	dec	r21
 c20:	a9 f7       	brne	.-22     	; 0xc0c <__udivmodhi4_loop>
 c22:	80 95       	com	r24
 c24:	90 95       	com	r25
 c26:	bc 01       	movw	r22, r24
 c28:	cd 01       	movw	r24, r26
 c2a:	08 95       	ret

00000c2c <__divmodhi4>:
 c2c:	97 fb       	bst	r25, 7
 c2e:	09 2e       	mov	r0, r25
 c30:	07 26       	eor	r0, r23
 c32:	0a d0       	rcall	.+20     	; 0xc48 <__divmodhi4_neg1>
 c34:	77 fd       	sbrc	r23, 7
 c36:	04 d0       	rcall	.+8      	; 0xc40 <__divmodhi4_neg2>
 c38:	e5 df       	rcall	.-54     	; 0xc04 <__udivmodhi4>
 c3a:	06 d0       	rcall	.+12     	; 0xc48 <__divmodhi4_neg1>
 c3c:	00 20       	and	r0, r0
 c3e:	1a f4       	brpl	.+6      	; 0xc46 <__divmodhi4_exit>

00000c40 <__divmodhi4_neg2>:
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255

00000c46 <__divmodhi4_exit>:
 c46:	08 95       	ret

00000c48 <__divmodhi4_neg1>:
 c48:	f6 f7       	brtc	.-4      	; 0xc46 <__divmodhi4_exit>
 c4a:	90 95       	com	r25
 c4c:	81 95       	neg	r24
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	08 95       	ret

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>

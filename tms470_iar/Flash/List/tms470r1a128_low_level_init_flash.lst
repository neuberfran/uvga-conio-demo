###############################################################################
#                                                                             #
#                                                       10/Mar/2009  14:25:09 #
# IAR ANSI C/C++ Compiler V5.30.0.31174/W32 KICKSTART for ARM                 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  big                                                      #
#    Source file  =  c:\projekty\microvga\uVGALib\tms470_iar\tms470r1a128_low #
#                    _level_init_flash.c                                      #
#    Command line =  c:\projekty\microvga\uVGALib\tms470_iar\tms470r1a128_low #
#                    _level_init_flash.c -lc c:\projekty\microvga\uVGALib\tms #
#                    470_iar\Flash\List\ -o c:\projekty\microvga\uVGALib\tms4 #
#                    70_iar\Flash\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=big --cpu=ARM7TDMI -e   #
#                    --fpu=None --dlib_config "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 5.4                           #
#                    Kickstart\arm\INC\DLib_Config_Normal.h" -I               #
#                    c:\projekty\microvga\uVGALib\tms470_iar\..\..\Configurat #
#                    ion_Files\A128_Files\ -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 5.4 Kickstart\arm\INC\"       #
#                    --interwork --cpu_mode thumb -Ol                         #
#    List file    =  c:\projekty\microvga\uVGALib\tms470_iar\Flash\List\tms47 #
#                    0r1a128_low_level_init_flash.lst                         #
#    Object file  =  c:\projekty\microvga\uVGALib\tms470_iar\Flash\Obj\tms470 #
#                    r1a128_low_level_init_flash.o                            #
#                                                                             #
#                                                                             #
###############################################################################

c:\projekty\microvga\uVGALib\tms470_iar\tms470r1a128_low_level_init_flash.c
      1          //**************************************************************************
      2          //
      3          // FILE:   __low_level_init
      4          //
      5          // TITLE:  TMS470R1x low level init for the A128.
      6          //
      7          // This function is called before the `main' function of the program.  Normally
      8          // preforming the low-level initializations.
      9          //
     10          // Note: that this function is called before the data segments are
     11          // initialized, this function cannot rely on the values of global or static variables.
     12          //
     13          // When this function returns zero, the startup code will inhibit the// initialization of the data segments.
     14          // The result is faster startup, the drawback is that neither global nor static data will be
     15          // initialized.
     16          //
     17          //**************************************************************************
     18          //
     19          //  Ver  | dd mmm yyyy  | Who  | Description of changes
     20          // ======|============= |======|==============================================
     21          //  0.01 | 14 sept 2005 | J.M. | Original
     22          //       |              |      |
     23          //       |              |      |
     24          //       |              |      |
     25          //       |              |      |
     26          //  Texas Instruments, Inc
     27          //**************************************************************************
     28          
     29          // ICODE is the same segment as cstartup. By placing __low_level_init
     30          // in the same segment, we make sure it can be reached with BL.
     31          
     32          #ifdef __cplusplus
     33          extern "C" {
     34          #endif
     35          
     36          #pragma language=extended
     37          
     38          #include <TexasInstruments/iotms470r1a128.h>
     39          #include <TexasInstruments/tms470r1a256_bit_definitions.h>
     40          
     41          
     42          #undef    PSTDBY_MAX
     43          #undef    PSLEEP_MAX
     44          #undef    BSTDBY_MAX
     45          #undef    BSLEEP_MAX
     46          
     47          #define   PSTDBY_MAX     ((unsigned int) 0x3C <<  5)    // 15:5   Pump standby (1.0uS at 60MHz)
     48          #define   PSLEEP_MAX     ((unsigned int) 0x78 <<  0)    // 14:1   Pump sleep (2.0uS at 60MHz)
     49          #define   BSTDBY_MAX     ((unsigned int) 0x06 <<  2)    // 7:2    Bank standby (100nS at 60MHz)
     50          #define   BSLEEP_MAX     ((unsigned int) 0x72 <<  8)    // 14:8   Bank sleep (1.9uS at 60MHz)
     51          
     52          #pragma location="ICODE"
     53          int __low_level_init(void)
     54          {
     55            // Disable peripheral access violation, memory access rights violation,
     56            // and illegal address reset
     57            SYSECR = RESET0 + PACCOVR + ACCOVR + ILLOVR;
     58          
     59            // Flash is 128K at 0x00000000 is einitialized as follows
     60            // Activate Flash at 0x00000000 that is connected to memory select 0,
     61            // set size to 128KB, enable read-only protection
     62          
     63            MFBAHR0 = 0x00000000;
     64            MFBALR0 |= BLOCK_SIZE_128K + RONLY;
     65          
     66            // De activate FLASH at 0x00000000 that is connected to memory select 1,
     67            // set size to 0KB
     68          
     69            MFBAHR1 = 0x00000000;
     70            MFBALR1 = 0x00000000;
     71          
     72          
     73            // RAM is 12K at 0x00400000 is einitialized as follows
     74            // Activate RAM at 0x00400000 that is connected to memory select 2,
     75            // set size to 8KB
     76            MFBAHR2 = 0x00000040;
     77            MFBALR2 = BLOCK_SIZE_8K;
     78          
     79            // De activate RAM at 0x00000000 that is connected to memory select 3,
     80            // set size to 0KB
     81            MFBAHR3 = 0x00000000;
     82            MFBALR3 = 0x00000000;
     83          
     84            // HET RAM static memory control register, use 7 wait states and
     85            // 32-bit access
     86            SMCR1 = WS_7 + DW_32;
     87          
     88            // Activate HET RAM at 0x00800000 that is connected to memory select 4,
     89            // set size to 2KB
     90            MFBAHR4 = 0x00000080;
     91            MFBALR4 = BLOCK_SIZE_2K;
     92          
     93            // Trailing wait states controlled by TWS bits, use write buffer for
     94            // expansion bus access
     95            WCR0 = WTWSOVR + WBENABLE;
     96          
     97            // Enable selected memory map
     98            MFBALR0 |= MS;
     99          
    100            // Enable Flash configuration mode, set PLL factor X4, divide by 1
    101            GCR |= FLCONFIG;
    102          
    103          //  SET FLASH WAIT STATES
    104          
    105            FMMAC1 = PSLEEP_MAX;                               // pump sleep to standby time
    106            FMMAC2 = BANK0_ENA + PMPPWR_ACTIVE + PSTDBY_MAX;   // bank0
    107            FMBAC1 = BNKPWR_ACTIVE+ BSTDBY_MAX;                // active
    108            FMBAC2 = PIPELINE_MODE + BSLEEP_MAX;               // 0 wait states
    109            FMREGOPT = ENPIPE;                                 // ENABLE PIPELINE MODE
    110          
    111            // Disable Flash configuration mode
    112            GCR =  ZPLL_CLK_DIV_PRE_1;                // xtal=6mhz, gclk=8*6MHz
    113          
    114            return 1; // Must return 1 to initialize C data.
    115          }
    116          
    117          #pragma language=default
    118          
    119          #ifdef __cplusplus
    120          }
    121          #endif

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     __low_level_init      0


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     __low_level_init  236

 
 236 bytes in section ICODE
 
 236 bytes of CODE memory

Errors: none
Warnings: none
